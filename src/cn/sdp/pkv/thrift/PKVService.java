/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.sdp.pkv.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PKVService {

  public interface Iface {

    public int createIndexTable(IndexInfo info) throws org.apache.thrift.TException;

    public int insertObject(String tbName, SPKVObject obj) throws org.apache.thrift.TException;

    public int batchInsertObjects(Map<String,List<SPKVObject>> objs) throws org.apache.thrift.TException;

    public int pointQueryCount(String tbName, List<SPColumn> qv) throws org.apache.thrift.TException;

    public List<SPKVObject> pointQuery(String tbName, List<SPColumn> qv, List<String> returnColumns) throws org.apache.thrift.TException;

    public int rangeQueryCount(String tbName, List<SPColumn> ql, List<SPColumn> qu) throws org.apache.thrift.TException;

    public List<SPKVObject> rangeQuery(String tbName, List<SPColumn> ql, List<SPColumn> qu, List<String> returnColumns) throws org.apache.thrift.TException;

    public List<SPKVObject> knnQuery(String tbName, List<SPColumn> qv, int K, List<String> returnColumns) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createIndexTable(IndexInfo info, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void insertObject(String tbName, SPKVObject obj, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchInsertObjects(Map<String,List<SPKVObject>> objs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pointQueryCount(String tbName, List<SPColumn> qv, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pointQuery(String tbName, List<SPColumn> qv, List<String> returnColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rangeQueryCount(String tbName, List<SPColumn> ql, List<SPColumn> qu, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rangeQuery(String tbName, List<SPColumn> ql, List<SPColumn> qu, List<String> returnColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void knnQuery(String tbName, List<SPColumn> qv, int K, List<String> returnColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int createIndexTable(IndexInfo info) throws org.apache.thrift.TException
    {
      send_createIndexTable(info);
      return recv_createIndexTable();
    }

    public void send_createIndexTable(IndexInfo info) throws org.apache.thrift.TException
    {
      createIndexTable_args args = new createIndexTable_args();
      args.setInfo(info);
      sendBase("createIndexTable", args);
    }

    public int recv_createIndexTable() throws org.apache.thrift.TException
    {
      createIndexTable_result result = new createIndexTable_result();
      receiveBase(result, "createIndexTable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createIndexTable failed: unknown result");
    }

    public int insertObject(String tbName, SPKVObject obj) throws org.apache.thrift.TException
    {
      send_insertObject(tbName, obj);
      return recv_insertObject();
    }

    public void send_insertObject(String tbName, SPKVObject obj) throws org.apache.thrift.TException
    {
      insertObject_args args = new insertObject_args();
      args.setTbName(tbName);
      args.setObj(obj);
      sendBase("insertObject", args);
    }

    public int recv_insertObject() throws org.apache.thrift.TException
    {
      insertObject_result result = new insertObject_result();
      receiveBase(result, "insertObject");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertObject failed: unknown result");
    }

    public int batchInsertObjects(Map<String,List<SPKVObject>> objs) throws org.apache.thrift.TException
    {
      send_batchInsertObjects(objs);
      return recv_batchInsertObjects();
    }

    public void send_batchInsertObjects(Map<String,List<SPKVObject>> objs) throws org.apache.thrift.TException
    {
      batchInsertObjects_args args = new batchInsertObjects_args();
      args.setObjs(objs);
      sendBase("batchInsertObjects", args);
    }

    public int recv_batchInsertObjects() throws org.apache.thrift.TException
    {
      batchInsertObjects_result result = new batchInsertObjects_result();
      receiveBase(result, "batchInsertObjects");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchInsertObjects failed: unknown result");
    }

    public int pointQueryCount(String tbName, List<SPColumn> qv) throws org.apache.thrift.TException
    {
      send_pointQueryCount(tbName, qv);
      return recv_pointQueryCount();
    }

    public void send_pointQueryCount(String tbName, List<SPColumn> qv) throws org.apache.thrift.TException
    {
      pointQueryCount_args args = new pointQueryCount_args();
      args.setTbName(tbName);
      args.setQv(qv);
      sendBase("pointQueryCount", args);
    }

    public int recv_pointQueryCount() throws org.apache.thrift.TException
    {
      pointQueryCount_result result = new pointQueryCount_result();
      receiveBase(result, "pointQueryCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pointQueryCount failed: unknown result");
    }

    public List<SPKVObject> pointQuery(String tbName, List<SPColumn> qv, List<String> returnColumns) throws org.apache.thrift.TException
    {
      send_pointQuery(tbName, qv, returnColumns);
      return recv_pointQuery();
    }

    public void send_pointQuery(String tbName, List<SPColumn> qv, List<String> returnColumns) throws org.apache.thrift.TException
    {
      pointQuery_args args = new pointQuery_args();
      args.setTbName(tbName);
      args.setQv(qv);
      args.setReturnColumns(returnColumns);
      sendBase("pointQuery", args);
    }

    public List<SPKVObject> recv_pointQuery() throws org.apache.thrift.TException
    {
      pointQuery_result result = new pointQuery_result();
      receiveBase(result, "pointQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pointQuery failed: unknown result");
    }

    public int rangeQueryCount(String tbName, List<SPColumn> ql, List<SPColumn> qu) throws org.apache.thrift.TException
    {
      send_rangeQueryCount(tbName, ql, qu);
      return recv_rangeQueryCount();
    }

    public void send_rangeQueryCount(String tbName, List<SPColumn> ql, List<SPColumn> qu) throws org.apache.thrift.TException
    {
      rangeQueryCount_args args = new rangeQueryCount_args();
      args.setTbName(tbName);
      args.setQl(ql);
      args.setQu(qu);
      sendBase("rangeQueryCount", args);
    }

    public int recv_rangeQueryCount() throws org.apache.thrift.TException
    {
      rangeQueryCount_result result = new rangeQueryCount_result();
      receiveBase(result, "rangeQueryCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rangeQueryCount failed: unknown result");
    }

    public List<SPKVObject> rangeQuery(String tbName, List<SPColumn> ql, List<SPColumn> qu, List<String> returnColumns) throws org.apache.thrift.TException
    {
      send_rangeQuery(tbName, ql, qu, returnColumns);
      return recv_rangeQuery();
    }

    public void send_rangeQuery(String tbName, List<SPColumn> ql, List<SPColumn> qu, List<String> returnColumns) throws org.apache.thrift.TException
    {
      rangeQuery_args args = new rangeQuery_args();
      args.setTbName(tbName);
      args.setQl(ql);
      args.setQu(qu);
      args.setReturnColumns(returnColumns);
      sendBase("rangeQuery", args);
    }

    public List<SPKVObject> recv_rangeQuery() throws org.apache.thrift.TException
    {
      rangeQuery_result result = new rangeQuery_result();
      receiveBase(result, "rangeQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rangeQuery failed: unknown result");
    }

    public List<SPKVObject> knnQuery(String tbName, List<SPColumn> qv, int K, List<String> returnColumns) throws org.apache.thrift.TException
    {
      send_knnQuery(tbName, qv, K, returnColumns);
      return recv_knnQuery();
    }

    public void send_knnQuery(String tbName, List<SPColumn> qv, int K, List<String> returnColumns) throws org.apache.thrift.TException
    {
      knnQuery_args args = new knnQuery_args();
      args.setTbName(tbName);
      args.setQv(qv);
      args.setK(K);
      args.setReturnColumns(returnColumns);
      sendBase("knnQuery", args);
    }

    public List<SPKVObject> recv_knnQuery() throws org.apache.thrift.TException
    {
      knnQuery_result result = new knnQuery_result();
      receiveBase(result, "knnQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "knnQuery failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createIndexTable(IndexInfo info, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createIndexTable_call method_call = new createIndexTable_call(info, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createIndexTable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private IndexInfo info;
      public createIndexTable_call(IndexInfo info, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.info = info;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createIndexTable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createIndexTable_args args = new createIndexTable_args();
        args.setInfo(info);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createIndexTable();
      }
    }

    public void insertObject(String tbName, SPKVObject obj, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertObject_call method_call = new insertObject_call(tbName, obj, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertObject_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tbName;
      private SPKVObject obj;
      public insertObject_call(String tbName, SPKVObject obj, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tbName = tbName;
        this.obj = obj;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertObject", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertObject_args args = new insertObject_args();
        args.setTbName(tbName);
        args.setObj(obj);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertObject();
      }
    }

    public void batchInsertObjects(Map<String,List<SPKVObject>> objs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchInsertObjects_call method_call = new batchInsertObjects_call(objs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchInsertObjects_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,List<SPKVObject>> objs;
      public batchInsertObjects_call(Map<String,List<SPKVObject>> objs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.objs = objs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchInsertObjects", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchInsertObjects_args args = new batchInsertObjects_args();
        args.setObjs(objs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchInsertObjects();
      }
    }

    public void pointQueryCount(String tbName, List<SPColumn> qv, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pointQueryCount_call method_call = new pointQueryCount_call(tbName, qv, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pointQueryCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tbName;
      private List<SPColumn> qv;
      public pointQueryCount_call(String tbName, List<SPColumn> qv, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tbName = tbName;
        this.qv = qv;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pointQueryCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pointQueryCount_args args = new pointQueryCount_args();
        args.setTbName(tbName);
        args.setQv(qv);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pointQueryCount();
      }
    }

    public void pointQuery(String tbName, List<SPColumn> qv, List<String> returnColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pointQuery_call method_call = new pointQuery_call(tbName, qv, returnColumns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pointQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tbName;
      private List<SPColumn> qv;
      private List<String> returnColumns;
      public pointQuery_call(String tbName, List<SPColumn> qv, List<String> returnColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tbName = tbName;
        this.qv = qv;
        this.returnColumns = returnColumns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pointQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pointQuery_args args = new pointQuery_args();
        args.setTbName(tbName);
        args.setQv(qv);
        args.setReturnColumns(returnColumns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SPKVObject> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pointQuery();
      }
    }

    public void rangeQueryCount(String tbName, List<SPColumn> ql, List<SPColumn> qu, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rangeQueryCount_call method_call = new rangeQueryCount_call(tbName, ql, qu, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rangeQueryCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tbName;
      private List<SPColumn> ql;
      private List<SPColumn> qu;
      public rangeQueryCount_call(String tbName, List<SPColumn> ql, List<SPColumn> qu, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tbName = tbName;
        this.ql = ql;
        this.qu = qu;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rangeQueryCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rangeQueryCount_args args = new rangeQueryCount_args();
        args.setTbName(tbName);
        args.setQl(ql);
        args.setQu(qu);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rangeQueryCount();
      }
    }

    public void rangeQuery(String tbName, List<SPColumn> ql, List<SPColumn> qu, List<String> returnColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rangeQuery_call method_call = new rangeQuery_call(tbName, ql, qu, returnColumns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rangeQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tbName;
      private List<SPColumn> ql;
      private List<SPColumn> qu;
      private List<String> returnColumns;
      public rangeQuery_call(String tbName, List<SPColumn> ql, List<SPColumn> qu, List<String> returnColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tbName = tbName;
        this.ql = ql;
        this.qu = qu;
        this.returnColumns = returnColumns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rangeQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rangeQuery_args args = new rangeQuery_args();
        args.setTbName(tbName);
        args.setQl(ql);
        args.setQu(qu);
        args.setReturnColumns(returnColumns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SPKVObject> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rangeQuery();
      }
    }

    public void knnQuery(String tbName, List<SPColumn> qv, int K, List<String> returnColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      knnQuery_call method_call = new knnQuery_call(tbName, qv, K, returnColumns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class knnQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tbName;
      private List<SPColumn> qv;
      private int K;
      private List<String> returnColumns;
      public knnQuery_call(String tbName, List<SPColumn> qv, int K, List<String> returnColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tbName = tbName;
        this.qv = qv;
        this.K = K;
        this.returnColumns = returnColumns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("knnQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        knnQuery_args args = new knnQuery_args();
        args.setTbName(tbName);
        args.setQv(qv);
        args.setK(K);
        args.setReturnColumns(returnColumns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SPKVObject> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_knnQuery();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createIndexTable", new createIndexTable());
      processMap.put("insertObject", new insertObject());
      processMap.put("batchInsertObjects", new batchInsertObjects());
      processMap.put("pointQueryCount", new pointQueryCount());
      processMap.put("pointQuery", new pointQuery());
      processMap.put("rangeQueryCount", new rangeQueryCount());
      processMap.put("rangeQuery", new rangeQuery());
      processMap.put("knnQuery", new knnQuery());
      return processMap;
    }

    public static class createIndexTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createIndexTable_args> {
      public createIndexTable() {
        super("createIndexTable");
      }

      public createIndexTable_args getEmptyArgsInstance() {
        return new createIndexTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createIndexTable_result getResult(I iface, createIndexTable_args args) throws org.apache.thrift.TException {
        createIndexTable_result result = new createIndexTable_result();
        result.success = iface.createIndexTable(args.info);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class insertObject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertObject_args> {
      public insertObject() {
        super("insertObject");
      }

      public insertObject_args getEmptyArgsInstance() {
        return new insertObject_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insertObject_result getResult(I iface, insertObject_args args) throws org.apache.thrift.TException {
        insertObject_result result = new insertObject_result();
        result.success = iface.insertObject(args.tbName, args.obj);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class batchInsertObjects<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchInsertObjects_args> {
      public batchInsertObjects() {
        super("batchInsertObjects");
      }

      public batchInsertObjects_args getEmptyArgsInstance() {
        return new batchInsertObjects_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchInsertObjects_result getResult(I iface, batchInsertObjects_args args) throws org.apache.thrift.TException {
        batchInsertObjects_result result = new batchInsertObjects_result();
        result.success = iface.batchInsertObjects(args.objs);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class pointQueryCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pointQueryCount_args> {
      public pointQueryCount() {
        super("pointQueryCount");
      }

      public pointQueryCount_args getEmptyArgsInstance() {
        return new pointQueryCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pointQueryCount_result getResult(I iface, pointQueryCount_args args) throws org.apache.thrift.TException {
        pointQueryCount_result result = new pointQueryCount_result();
        result.success = iface.pointQueryCount(args.tbName, args.qv);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class pointQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pointQuery_args> {
      public pointQuery() {
        super("pointQuery");
      }

      public pointQuery_args getEmptyArgsInstance() {
        return new pointQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pointQuery_result getResult(I iface, pointQuery_args args) throws org.apache.thrift.TException {
        pointQuery_result result = new pointQuery_result();
        result.success = iface.pointQuery(args.tbName, args.qv, args.returnColumns);
        return result;
      }
    }

    public static class rangeQueryCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rangeQueryCount_args> {
      public rangeQueryCount() {
        super("rangeQueryCount");
      }

      public rangeQueryCount_args getEmptyArgsInstance() {
        return new rangeQueryCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rangeQueryCount_result getResult(I iface, rangeQueryCount_args args) throws org.apache.thrift.TException {
        rangeQueryCount_result result = new rangeQueryCount_result();
        result.success = iface.rangeQueryCount(args.tbName, args.ql, args.qu);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class rangeQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rangeQuery_args> {
      public rangeQuery() {
        super("rangeQuery");
      }

      public rangeQuery_args getEmptyArgsInstance() {
        return new rangeQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rangeQuery_result getResult(I iface, rangeQuery_args args) throws org.apache.thrift.TException {
        rangeQuery_result result = new rangeQuery_result();
        result.success = iface.rangeQuery(args.tbName, args.ql, args.qu, args.returnColumns);
        return result;
      }
    }

    public static class knnQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, knnQuery_args> {
      public knnQuery() {
        super("knnQuery");
      }

      public knnQuery_args getEmptyArgsInstance() {
        return new knnQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public knnQuery_result getResult(I iface, knnQuery_args args) throws org.apache.thrift.TException {
        knnQuery_result result = new knnQuery_result();
        result.success = iface.knnQuery(args.tbName, args.qv, args.K, args.returnColumns);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createIndexTable", new createIndexTable());
      processMap.put("insertObject", new insertObject());
      processMap.put("batchInsertObjects", new batchInsertObjects());
      processMap.put("pointQueryCount", new pointQueryCount());
      processMap.put("pointQuery", new pointQuery());
      processMap.put("rangeQueryCount", new rangeQueryCount());
      processMap.put("rangeQuery", new rangeQuery());
      processMap.put("knnQuery", new knnQuery());
      return processMap;
    }

    public static class createIndexTable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createIndexTable_args, Integer> {
      public createIndexTable() {
        super("createIndexTable");
      }

      public createIndexTable_args getEmptyArgsInstance() {
        return new createIndexTable_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            createIndexTable_result result = new createIndexTable_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createIndexTable_result result = new createIndexTable_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createIndexTable_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.createIndexTable(args.info,resultHandler);
      }
    }

    public static class insertObject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertObject_args, Integer> {
      public insertObject() {
        super("insertObject");
      }

      public insertObject_args getEmptyArgsInstance() {
        return new insertObject_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            insertObject_result result = new insertObject_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insertObject_result result = new insertObject_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertObject_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.insertObject(args.tbName, args.obj,resultHandler);
      }
    }

    public static class batchInsertObjects<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchInsertObjects_args, Integer> {
      public batchInsertObjects() {
        super("batchInsertObjects");
      }

      public batchInsertObjects_args getEmptyArgsInstance() {
        return new batchInsertObjects_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            batchInsertObjects_result result = new batchInsertObjects_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchInsertObjects_result result = new batchInsertObjects_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchInsertObjects_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.batchInsertObjects(args.objs,resultHandler);
      }
    }

    public static class pointQueryCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pointQueryCount_args, Integer> {
      public pointQueryCount() {
        super("pointQueryCount");
      }

      public pointQueryCount_args getEmptyArgsInstance() {
        return new pointQueryCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            pointQueryCount_result result = new pointQueryCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pointQueryCount_result result = new pointQueryCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pointQueryCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.pointQueryCount(args.tbName, args.qv,resultHandler);
      }
    }

    public static class pointQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pointQuery_args, List<SPKVObject>> {
      public pointQuery() {
        super("pointQuery");
      }

      public pointQuery_args getEmptyArgsInstance() {
        return new pointQuery_args();
      }

      public AsyncMethodCallback<List<SPKVObject>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SPKVObject>>() { 
          public void onComplete(List<SPKVObject> o) {
            pointQuery_result result = new pointQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pointQuery_result result = new pointQuery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pointQuery_args args, org.apache.thrift.async.AsyncMethodCallback<List<SPKVObject>> resultHandler) throws TException {
        iface.pointQuery(args.tbName, args.qv, args.returnColumns,resultHandler);
      }
    }

    public static class rangeQueryCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rangeQueryCount_args, Integer> {
      public rangeQueryCount() {
        super("rangeQueryCount");
      }

      public rangeQueryCount_args getEmptyArgsInstance() {
        return new rangeQueryCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            rangeQueryCount_result result = new rangeQueryCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rangeQueryCount_result result = new rangeQueryCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rangeQueryCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.rangeQueryCount(args.tbName, args.ql, args.qu,resultHandler);
      }
    }

    public static class rangeQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rangeQuery_args, List<SPKVObject>> {
      public rangeQuery() {
        super("rangeQuery");
      }

      public rangeQuery_args getEmptyArgsInstance() {
        return new rangeQuery_args();
      }

      public AsyncMethodCallback<List<SPKVObject>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SPKVObject>>() { 
          public void onComplete(List<SPKVObject> o) {
            rangeQuery_result result = new rangeQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rangeQuery_result result = new rangeQuery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rangeQuery_args args, org.apache.thrift.async.AsyncMethodCallback<List<SPKVObject>> resultHandler) throws TException {
        iface.rangeQuery(args.tbName, args.ql, args.qu, args.returnColumns,resultHandler);
      }
    }

    public static class knnQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, knnQuery_args, List<SPKVObject>> {
      public knnQuery() {
        super("knnQuery");
      }

      public knnQuery_args getEmptyArgsInstance() {
        return new knnQuery_args();
      }

      public AsyncMethodCallback<List<SPKVObject>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SPKVObject>>() { 
          public void onComplete(List<SPKVObject> o) {
            knnQuery_result result = new knnQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            knnQuery_result result = new knnQuery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, knnQuery_args args, org.apache.thrift.async.AsyncMethodCallback<List<SPKVObject>> resultHandler) throws TException {
        iface.knnQuery(args.tbName, args.qv, args.K, args.returnColumns,resultHandler);
      }
    }

  }

  public static class createIndexTable_args implements org.apache.thrift.TBase<createIndexTable_args, createIndexTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<createIndexTable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createIndexTable_args");

    private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createIndexTable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createIndexTable_argsTupleSchemeFactory());
    }

    public IndexInfo info; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INFO((short)1, "info");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INFO
            return INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IndexInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createIndexTable_args.class, metaDataMap);
    }

    public createIndexTable_args() {
    }

    public createIndexTable_args(
      IndexInfo info)
    {
      this();
      this.info = info;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createIndexTable_args(createIndexTable_args other) {
      if (other.isSetInfo()) {
        this.info = new IndexInfo(other.info);
      }
    }

    public createIndexTable_args deepCopy() {
      return new createIndexTable_args(this);
    }

    @Override
    public void clear() {
      this.info = null;
    }

    public IndexInfo getInfo() {
      return this.info;
    }

    public createIndexTable_args setInfo(IndexInfo info) {
      this.info = info;
      return this;
    }

    public void unsetInfo() {
      this.info = null;
    }

    /** Returns true if field info is set (has been assigned a value) and false otherwise */
    public boolean isSetInfo() {
      return this.info != null;
    }

    public void setInfoIsSet(boolean value) {
      if (!value) {
        this.info = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INFO:
        if (value == null) {
          unsetInfo();
        } else {
          setInfo((IndexInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INFO:
        return getInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INFO:
        return isSetInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createIndexTable_args)
        return this.equals((createIndexTable_args)that);
      return false;
    }

    public boolean equals(createIndexTable_args that) {
      if (that == null)
        return false;

      boolean this_present_info = true && this.isSetInfo();
      boolean that_present_info = true && that.isSetInfo();
      if (this_present_info || that_present_info) {
        if (!(this_present_info && that_present_info))
          return false;
        if (!this.info.equals(that.info))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createIndexTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInfo()).compareTo(other.isSetInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, other.info);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createIndexTable_args(");
      boolean first = true;

      sb.append("info:");
      if (this.info == null) {
        sb.append("null");
      } else {
        sb.append(this.info);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (info != null) {
        info.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createIndexTable_argsStandardSchemeFactory implements SchemeFactory {
      public createIndexTable_argsStandardScheme getScheme() {
        return new createIndexTable_argsStandardScheme();
      }
    }

    private static class createIndexTable_argsStandardScheme extends StandardScheme<createIndexTable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createIndexTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.info = new IndexInfo();
                struct.info.read(iprot);
                struct.setInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createIndexTable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.info != null) {
          oprot.writeFieldBegin(INFO_FIELD_DESC);
          struct.info.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createIndexTable_argsTupleSchemeFactory implements SchemeFactory {
      public createIndexTable_argsTupleScheme getScheme() {
        return new createIndexTable_argsTupleScheme();
      }
    }

    private static class createIndexTable_argsTupleScheme extends TupleScheme<createIndexTable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createIndexTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInfo()) {
          struct.info.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createIndexTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.info = new IndexInfo();
          struct.info.read(iprot);
          struct.setInfoIsSet(true);
        }
      }
    }

  }

  public static class createIndexTable_result implements org.apache.thrift.TBase<createIndexTable_result, createIndexTable_result._Fields>, java.io.Serializable, Cloneable, Comparable<createIndexTable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createIndexTable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createIndexTable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createIndexTable_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createIndexTable_result.class, metaDataMap);
    }

    public createIndexTable_result() {
    }

    public createIndexTable_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createIndexTable_result(createIndexTable_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createIndexTable_result deepCopy() {
      return new createIndexTable_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public createIndexTable_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createIndexTable_result)
        return this.equals((createIndexTable_result)that);
      return false;
    }

    public boolean equals(createIndexTable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createIndexTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createIndexTable_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createIndexTable_resultStandardSchemeFactory implements SchemeFactory {
      public createIndexTable_resultStandardScheme getScheme() {
        return new createIndexTable_resultStandardScheme();
      }
    }

    private static class createIndexTable_resultStandardScheme extends StandardScheme<createIndexTable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createIndexTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createIndexTable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createIndexTable_resultTupleSchemeFactory implements SchemeFactory {
      public createIndexTable_resultTupleScheme getScheme() {
        return new createIndexTable_resultTupleScheme();
      }
    }

    private static class createIndexTable_resultTupleScheme extends TupleScheme<createIndexTable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createIndexTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createIndexTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class insertObject_args implements org.apache.thrift.TBase<insertObject_args, insertObject_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertObject_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertObject_args");

    private static final org.apache.thrift.protocol.TField TB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tbName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("obj", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertObject_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertObject_argsTupleSchemeFactory());
    }

    public String tbName; // required
    public SPKVObject obj; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TB_NAME((short)1, "tbName"),
      OBJ((short)2, "obj");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TB_NAME
            return TB_NAME;
          case 2: // OBJ
            return OBJ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TB_NAME, new org.apache.thrift.meta_data.FieldMetaData("tbName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OBJ, new org.apache.thrift.meta_data.FieldMetaData("obj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SPKVObject.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertObject_args.class, metaDataMap);
    }

    public insertObject_args() {
    }

    public insertObject_args(
      String tbName,
      SPKVObject obj)
    {
      this();
      this.tbName = tbName;
      this.obj = obj;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertObject_args(insertObject_args other) {
      if (other.isSetTbName()) {
        this.tbName = other.tbName;
      }
      if (other.isSetObj()) {
        this.obj = new SPKVObject(other.obj);
      }
    }

    public insertObject_args deepCopy() {
      return new insertObject_args(this);
    }

    @Override
    public void clear() {
      this.tbName = null;
      this.obj = null;
    }

    public String getTbName() {
      return this.tbName;
    }

    public insertObject_args setTbName(String tbName) {
      this.tbName = tbName;
      return this;
    }

    public void unsetTbName() {
      this.tbName = null;
    }

    /** Returns true if field tbName is set (has been assigned a value) and false otherwise */
    public boolean isSetTbName() {
      return this.tbName != null;
    }

    public void setTbNameIsSet(boolean value) {
      if (!value) {
        this.tbName = null;
      }
    }

    public SPKVObject getObj() {
      return this.obj;
    }

    public insertObject_args setObj(SPKVObject obj) {
      this.obj = obj;
      return this;
    }

    public void unsetObj() {
      this.obj = null;
    }

    /** Returns true if field obj is set (has been assigned a value) and false otherwise */
    public boolean isSetObj() {
      return this.obj != null;
    }

    public void setObjIsSet(boolean value) {
      if (!value) {
        this.obj = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TB_NAME:
        if (value == null) {
          unsetTbName();
        } else {
          setTbName((String)value);
        }
        break;

      case OBJ:
        if (value == null) {
          unsetObj();
        } else {
          setObj((SPKVObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TB_NAME:
        return getTbName();

      case OBJ:
        return getObj();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TB_NAME:
        return isSetTbName();
      case OBJ:
        return isSetObj();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertObject_args)
        return this.equals((insertObject_args)that);
      return false;
    }

    public boolean equals(insertObject_args that) {
      if (that == null)
        return false;

      boolean this_present_tbName = true && this.isSetTbName();
      boolean that_present_tbName = true && that.isSetTbName();
      if (this_present_tbName || that_present_tbName) {
        if (!(this_present_tbName && that_present_tbName))
          return false;
        if (!this.tbName.equals(that.tbName))
          return false;
      }

      boolean this_present_obj = true && this.isSetObj();
      boolean that_present_obj = true && that.isSetObj();
      if (this_present_obj || that_present_obj) {
        if (!(this_present_obj && that_present_obj))
          return false;
        if (!this.obj.equals(that.obj))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(insertObject_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTbName()).compareTo(other.isSetTbName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTbName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbName, other.tbName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetObj()).compareTo(other.isSetObj());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObj()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obj, other.obj);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertObject_args(");
      boolean first = true;

      sb.append("tbName:");
      if (this.tbName == null) {
        sb.append("null");
      } else {
        sb.append(this.tbName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("obj:");
      if (this.obj == null) {
        sb.append("null");
      } else {
        sb.append(this.obj);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (obj != null) {
        obj.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertObject_argsStandardSchemeFactory implements SchemeFactory {
      public insertObject_argsStandardScheme getScheme() {
        return new insertObject_argsStandardScheme();
      }
    }

    private static class insertObject_argsStandardScheme extends StandardScheme<insertObject_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertObject_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TB_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tbName = iprot.readString();
                struct.setTbNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OBJ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.obj = new SPKVObject();
                struct.obj.read(iprot);
                struct.setObjIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertObject_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tbName != null) {
          oprot.writeFieldBegin(TB_NAME_FIELD_DESC);
          oprot.writeString(struct.tbName);
          oprot.writeFieldEnd();
        }
        if (struct.obj != null) {
          oprot.writeFieldBegin(OBJ_FIELD_DESC);
          struct.obj.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertObject_argsTupleSchemeFactory implements SchemeFactory {
      public insertObject_argsTupleScheme getScheme() {
        return new insertObject_argsTupleScheme();
      }
    }

    private static class insertObject_argsTupleScheme extends TupleScheme<insertObject_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertObject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTbName()) {
          optionals.set(0);
        }
        if (struct.isSetObj()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTbName()) {
          oprot.writeString(struct.tbName);
        }
        if (struct.isSetObj()) {
          struct.obj.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertObject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tbName = iprot.readString();
          struct.setTbNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.obj = new SPKVObject();
          struct.obj.read(iprot);
          struct.setObjIsSet(true);
        }
      }
    }

  }

  public static class insertObject_result implements org.apache.thrift.TBase<insertObject_result, insertObject_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertObject_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertObject_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertObject_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertObject_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertObject_result.class, metaDataMap);
    }

    public insertObject_result() {
    }

    public insertObject_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertObject_result(insertObject_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public insertObject_result deepCopy() {
      return new insertObject_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public insertObject_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertObject_result)
        return this.equals((insertObject_result)that);
      return false;
    }

    public boolean equals(insertObject_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(insertObject_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertObject_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertObject_resultStandardSchemeFactory implements SchemeFactory {
      public insertObject_resultStandardScheme getScheme() {
        return new insertObject_resultStandardScheme();
      }
    }

    private static class insertObject_resultStandardScheme extends StandardScheme<insertObject_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertObject_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertObject_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertObject_resultTupleSchemeFactory implements SchemeFactory {
      public insertObject_resultTupleScheme getScheme() {
        return new insertObject_resultTupleScheme();
      }
    }

    private static class insertObject_resultTupleScheme extends TupleScheme<insertObject_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertObject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertObject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class batchInsertObjects_args implements org.apache.thrift.TBase<batchInsertObjects_args, batchInsertObjects_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchInsertObjects_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchInsertObjects_args");

    private static final org.apache.thrift.protocol.TField OBJS_FIELD_DESC = new org.apache.thrift.protocol.TField("objs", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchInsertObjects_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchInsertObjects_argsTupleSchemeFactory());
    }

    public Map<String,List<SPKVObject>> objs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJS((short)1, "objs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJS
            return OBJS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJS, new org.apache.thrift.meta_data.FieldMetaData("objs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SPKVObject.class)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchInsertObjects_args.class, metaDataMap);
    }

    public batchInsertObjects_args() {
    }

    public batchInsertObjects_args(
      Map<String,List<SPKVObject>> objs)
    {
      this();
      this.objs = objs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchInsertObjects_args(batchInsertObjects_args other) {
      if (other.isSetObjs()) {
        Map<String,List<SPKVObject>> __this__objs = new HashMap<String,List<SPKVObject>>(other.objs.size());
        for (Map.Entry<String, List<SPKVObject>> other_element : other.objs.entrySet()) {

          String other_element_key = other_element.getKey();
          List<SPKVObject> other_element_value = other_element.getValue();

          String __this__objs_copy_key = other_element_key;

          List<SPKVObject> __this__objs_copy_value = new ArrayList<SPKVObject>(other_element_value.size());
          for (SPKVObject other_element_value_element : other_element_value) {
            __this__objs_copy_value.add(new SPKVObject(other_element_value_element));
          }

          __this__objs.put(__this__objs_copy_key, __this__objs_copy_value);
        }
        this.objs = __this__objs;
      }
    }

    public batchInsertObjects_args deepCopy() {
      return new batchInsertObjects_args(this);
    }

    @Override
    public void clear() {
      this.objs = null;
    }

    public int getObjsSize() {
      return (this.objs == null) ? 0 : this.objs.size();
    }

    public void putToObjs(String key, List<SPKVObject> val) {
      if (this.objs == null) {
        this.objs = new HashMap<String,List<SPKVObject>>();
      }
      this.objs.put(key, val);
    }

    public Map<String,List<SPKVObject>> getObjs() {
      return this.objs;
    }

    public batchInsertObjects_args setObjs(Map<String,List<SPKVObject>> objs) {
      this.objs = objs;
      return this;
    }

    public void unsetObjs() {
      this.objs = null;
    }

    /** Returns true if field objs is set (has been assigned a value) and false otherwise */
    public boolean isSetObjs() {
      return this.objs != null;
    }

    public void setObjsIsSet(boolean value) {
      if (!value) {
        this.objs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJS:
        if (value == null) {
          unsetObjs();
        } else {
          setObjs((Map<String,List<SPKVObject>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJS:
        return getObjs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJS:
        return isSetObjs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchInsertObjects_args)
        return this.equals((batchInsertObjects_args)that);
      return false;
    }

    public boolean equals(batchInsertObjects_args that) {
      if (that == null)
        return false;

      boolean this_present_objs = true && this.isSetObjs();
      boolean that_present_objs = true && that.isSetObjs();
      if (this_present_objs || that_present_objs) {
        if (!(this_present_objs && that_present_objs))
          return false;
        if (!this.objs.equals(that.objs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchInsertObjects_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObjs()).compareTo(other.isSetObjs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObjs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objs, other.objs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchInsertObjects_args(");
      boolean first = true;

      sb.append("objs:");
      if (this.objs == null) {
        sb.append("null");
      } else {
        sb.append(this.objs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchInsertObjects_argsStandardSchemeFactory implements SchemeFactory {
      public batchInsertObjects_argsStandardScheme getScheme() {
        return new batchInsertObjects_argsStandardScheme();
      }
    }

    private static class batchInsertObjects_argsStandardScheme extends StandardScheme<batchInsertObjects_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchInsertObjects_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
                  struct.objs = new HashMap<String,List<SPKVObject>>(2*_map64.size);
                  for (int _i65 = 0; _i65 < _map64.size; ++_i65)
                  {
                    String _key66;
                    List<SPKVObject> _val67;
                    _key66 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                      _val67 = new ArrayList<SPKVObject>(_list68.size);
                      for (int _i69 = 0; _i69 < _list68.size; ++_i69)
                      {
                        SPKVObject _elem70;
                        _elem70 = new SPKVObject();
                        _elem70.read(iprot);
                        _val67.add(_elem70);
                      }
                      iprot.readListEnd();
                    }
                    struct.objs.put(_key66, _val67);
                  }
                  iprot.readMapEnd();
                }
                struct.setObjsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchInsertObjects_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.objs != null) {
          oprot.writeFieldBegin(OBJS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.objs.size()));
            for (Map.Entry<String, List<SPKVObject>> _iter71 : struct.objs.entrySet())
            {
              oprot.writeString(_iter71.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter71.getValue().size()));
                for (SPKVObject _iter72 : _iter71.getValue())
                {
                  _iter72.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchInsertObjects_argsTupleSchemeFactory implements SchemeFactory {
      public batchInsertObjects_argsTupleScheme getScheme() {
        return new batchInsertObjects_argsTupleScheme();
      }
    }

    private static class batchInsertObjects_argsTupleScheme extends TupleScheme<batchInsertObjects_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchInsertObjects_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObjs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetObjs()) {
          {
            oprot.writeI32(struct.objs.size());
            for (Map.Entry<String, List<SPKVObject>> _iter73 : struct.objs.entrySet())
            {
              oprot.writeString(_iter73.getKey());
              {
                oprot.writeI32(_iter73.getValue().size());
                for (SPKVObject _iter74 : _iter73.getValue())
                {
                  _iter74.write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchInsertObjects_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map75 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.objs = new HashMap<String,List<SPKVObject>>(2*_map75.size);
            for (int _i76 = 0; _i76 < _map75.size; ++_i76)
            {
              String _key77;
              List<SPKVObject> _val78;
              _key77 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _val78 = new ArrayList<SPKVObject>(_list79.size);
                for (int _i80 = 0; _i80 < _list79.size; ++_i80)
                {
                  SPKVObject _elem81;
                  _elem81 = new SPKVObject();
                  _elem81.read(iprot);
                  _val78.add(_elem81);
                }
              }
              struct.objs.put(_key77, _val78);
            }
          }
          struct.setObjsIsSet(true);
        }
      }
    }

  }

  public static class batchInsertObjects_result implements org.apache.thrift.TBase<batchInsertObjects_result, batchInsertObjects_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchInsertObjects_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchInsertObjects_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchInsertObjects_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchInsertObjects_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchInsertObjects_result.class, metaDataMap);
    }

    public batchInsertObjects_result() {
    }

    public batchInsertObjects_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchInsertObjects_result(batchInsertObjects_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public batchInsertObjects_result deepCopy() {
      return new batchInsertObjects_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public batchInsertObjects_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchInsertObjects_result)
        return this.equals((batchInsertObjects_result)that);
      return false;
    }

    public boolean equals(batchInsertObjects_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchInsertObjects_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchInsertObjects_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchInsertObjects_resultStandardSchemeFactory implements SchemeFactory {
      public batchInsertObjects_resultStandardScheme getScheme() {
        return new batchInsertObjects_resultStandardScheme();
      }
    }

    private static class batchInsertObjects_resultStandardScheme extends StandardScheme<batchInsertObjects_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchInsertObjects_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchInsertObjects_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchInsertObjects_resultTupleSchemeFactory implements SchemeFactory {
      public batchInsertObjects_resultTupleScheme getScheme() {
        return new batchInsertObjects_resultTupleScheme();
      }
    }

    private static class batchInsertObjects_resultTupleScheme extends TupleScheme<batchInsertObjects_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchInsertObjects_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchInsertObjects_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class pointQueryCount_args implements org.apache.thrift.TBase<pointQueryCount_args, pointQueryCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<pointQueryCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pointQueryCount_args");

    private static final org.apache.thrift.protocol.TField TB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tbName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QV_FIELD_DESC = new org.apache.thrift.protocol.TField("qv", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pointQueryCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pointQueryCount_argsTupleSchemeFactory());
    }

    public String tbName; // required
    public List<SPColumn> qv; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TB_NAME((short)1, "tbName"),
      QV((short)2, "qv");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TB_NAME
            return TB_NAME;
          case 2: // QV
            return QV;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TB_NAME, new org.apache.thrift.meta_data.FieldMetaData("tbName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QV, new org.apache.thrift.meta_data.FieldMetaData("qv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SPColumn.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pointQueryCount_args.class, metaDataMap);
    }

    public pointQueryCount_args() {
    }

    public pointQueryCount_args(
      String tbName,
      List<SPColumn> qv)
    {
      this();
      this.tbName = tbName;
      this.qv = qv;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pointQueryCount_args(pointQueryCount_args other) {
      if (other.isSetTbName()) {
        this.tbName = other.tbName;
      }
      if (other.isSetQv()) {
        List<SPColumn> __this__qv = new ArrayList<SPColumn>(other.qv.size());
        for (SPColumn other_element : other.qv) {
          __this__qv.add(new SPColumn(other_element));
        }
        this.qv = __this__qv;
      }
    }

    public pointQueryCount_args deepCopy() {
      return new pointQueryCount_args(this);
    }

    @Override
    public void clear() {
      this.tbName = null;
      this.qv = null;
    }

    public String getTbName() {
      return this.tbName;
    }

    public pointQueryCount_args setTbName(String tbName) {
      this.tbName = tbName;
      return this;
    }

    public void unsetTbName() {
      this.tbName = null;
    }

    /** Returns true if field tbName is set (has been assigned a value) and false otherwise */
    public boolean isSetTbName() {
      return this.tbName != null;
    }

    public void setTbNameIsSet(boolean value) {
      if (!value) {
        this.tbName = null;
      }
    }

    public int getQvSize() {
      return (this.qv == null) ? 0 : this.qv.size();
    }

    public java.util.Iterator<SPColumn> getQvIterator() {
      return (this.qv == null) ? null : this.qv.iterator();
    }

    public void addToQv(SPColumn elem) {
      if (this.qv == null) {
        this.qv = new ArrayList<SPColumn>();
      }
      this.qv.add(elem);
    }

    public List<SPColumn> getQv() {
      return this.qv;
    }

    public pointQueryCount_args setQv(List<SPColumn> qv) {
      this.qv = qv;
      return this;
    }

    public void unsetQv() {
      this.qv = null;
    }

    /** Returns true if field qv is set (has been assigned a value) and false otherwise */
    public boolean isSetQv() {
      return this.qv != null;
    }

    public void setQvIsSet(boolean value) {
      if (!value) {
        this.qv = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TB_NAME:
        if (value == null) {
          unsetTbName();
        } else {
          setTbName((String)value);
        }
        break;

      case QV:
        if (value == null) {
          unsetQv();
        } else {
          setQv((List<SPColumn>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TB_NAME:
        return getTbName();

      case QV:
        return getQv();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TB_NAME:
        return isSetTbName();
      case QV:
        return isSetQv();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pointQueryCount_args)
        return this.equals((pointQueryCount_args)that);
      return false;
    }

    public boolean equals(pointQueryCount_args that) {
      if (that == null)
        return false;

      boolean this_present_tbName = true && this.isSetTbName();
      boolean that_present_tbName = true && that.isSetTbName();
      if (this_present_tbName || that_present_tbName) {
        if (!(this_present_tbName && that_present_tbName))
          return false;
        if (!this.tbName.equals(that.tbName))
          return false;
      }

      boolean this_present_qv = true && this.isSetQv();
      boolean that_present_qv = true && that.isSetQv();
      if (this_present_qv || that_present_qv) {
        if (!(this_present_qv && that_present_qv))
          return false;
        if (!this.qv.equals(that.qv))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(pointQueryCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTbName()).compareTo(other.isSetTbName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTbName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbName, other.tbName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQv()).compareTo(other.isSetQv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qv, other.qv);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pointQueryCount_args(");
      boolean first = true;

      sb.append("tbName:");
      if (this.tbName == null) {
        sb.append("null");
      } else {
        sb.append(this.tbName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qv:");
      if (this.qv == null) {
        sb.append("null");
      } else {
        sb.append(this.qv);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pointQueryCount_argsStandardSchemeFactory implements SchemeFactory {
      public pointQueryCount_argsStandardScheme getScheme() {
        return new pointQueryCount_argsStandardScheme();
      }
    }

    private static class pointQueryCount_argsStandardScheme extends StandardScheme<pointQueryCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pointQueryCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TB_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tbName = iprot.readString();
                struct.setTbNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QV
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.qv = new ArrayList<SPColumn>(_list82.size);
                  for (int _i83 = 0; _i83 < _list82.size; ++_i83)
                  {
                    SPColumn _elem84;
                    _elem84 = new SPColumn();
                    _elem84.read(iprot);
                    struct.qv.add(_elem84);
                  }
                  iprot.readListEnd();
                }
                struct.setQvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pointQueryCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tbName != null) {
          oprot.writeFieldBegin(TB_NAME_FIELD_DESC);
          oprot.writeString(struct.tbName);
          oprot.writeFieldEnd();
        }
        if (struct.qv != null) {
          oprot.writeFieldBegin(QV_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.qv.size()));
            for (SPColumn _iter85 : struct.qv)
            {
              _iter85.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pointQueryCount_argsTupleSchemeFactory implements SchemeFactory {
      public pointQueryCount_argsTupleScheme getScheme() {
        return new pointQueryCount_argsTupleScheme();
      }
    }

    private static class pointQueryCount_argsTupleScheme extends TupleScheme<pointQueryCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pointQueryCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTbName()) {
          optionals.set(0);
        }
        if (struct.isSetQv()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTbName()) {
          oprot.writeString(struct.tbName);
        }
        if (struct.isSetQv()) {
          {
            oprot.writeI32(struct.qv.size());
            for (SPColumn _iter86 : struct.qv)
            {
              _iter86.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pointQueryCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tbName = iprot.readString();
          struct.setTbNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.qv = new ArrayList<SPColumn>(_list87.size);
            for (int _i88 = 0; _i88 < _list87.size; ++_i88)
            {
              SPColumn _elem89;
              _elem89 = new SPColumn();
              _elem89.read(iprot);
              struct.qv.add(_elem89);
            }
          }
          struct.setQvIsSet(true);
        }
      }
    }

  }

  public static class pointQueryCount_result implements org.apache.thrift.TBase<pointQueryCount_result, pointQueryCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<pointQueryCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pointQueryCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pointQueryCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pointQueryCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pointQueryCount_result.class, metaDataMap);
    }

    public pointQueryCount_result() {
    }

    public pointQueryCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pointQueryCount_result(pointQueryCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public pointQueryCount_result deepCopy() {
      return new pointQueryCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public pointQueryCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pointQueryCount_result)
        return this.equals((pointQueryCount_result)that);
      return false;
    }

    public boolean equals(pointQueryCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(pointQueryCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pointQueryCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pointQueryCount_resultStandardSchemeFactory implements SchemeFactory {
      public pointQueryCount_resultStandardScheme getScheme() {
        return new pointQueryCount_resultStandardScheme();
      }
    }

    private static class pointQueryCount_resultStandardScheme extends StandardScheme<pointQueryCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pointQueryCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pointQueryCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pointQueryCount_resultTupleSchemeFactory implements SchemeFactory {
      public pointQueryCount_resultTupleScheme getScheme() {
        return new pointQueryCount_resultTupleScheme();
      }
    }

    private static class pointQueryCount_resultTupleScheme extends TupleScheme<pointQueryCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pointQueryCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pointQueryCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class pointQuery_args implements org.apache.thrift.TBase<pointQuery_args, pointQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<pointQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pointQuery_args");

    private static final org.apache.thrift.protocol.TField TB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tbName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QV_FIELD_DESC = new org.apache.thrift.protocol.TField("qv", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField RETURN_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("returnColumns", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pointQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pointQuery_argsTupleSchemeFactory());
    }

    public String tbName; // required
    public List<SPColumn> qv; // required
    public List<String> returnColumns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TB_NAME((short)1, "tbName"),
      QV((short)2, "qv"),
      RETURN_COLUMNS((short)3, "returnColumns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TB_NAME
            return TB_NAME;
          case 2: // QV
            return QV;
          case 3: // RETURN_COLUMNS
            return RETURN_COLUMNS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TB_NAME, new org.apache.thrift.meta_data.FieldMetaData("tbName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QV, new org.apache.thrift.meta_data.FieldMetaData("qv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SPColumn.class))));
      tmpMap.put(_Fields.RETURN_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("returnColumns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pointQuery_args.class, metaDataMap);
    }

    public pointQuery_args() {
    }

    public pointQuery_args(
      String tbName,
      List<SPColumn> qv,
      List<String> returnColumns)
    {
      this();
      this.tbName = tbName;
      this.qv = qv;
      this.returnColumns = returnColumns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pointQuery_args(pointQuery_args other) {
      if (other.isSetTbName()) {
        this.tbName = other.tbName;
      }
      if (other.isSetQv()) {
        List<SPColumn> __this__qv = new ArrayList<SPColumn>(other.qv.size());
        for (SPColumn other_element : other.qv) {
          __this__qv.add(new SPColumn(other_element));
        }
        this.qv = __this__qv;
      }
      if (other.isSetReturnColumns()) {
        List<String> __this__returnColumns = new ArrayList<String>(other.returnColumns);
        this.returnColumns = __this__returnColumns;
      }
    }

    public pointQuery_args deepCopy() {
      return new pointQuery_args(this);
    }

    @Override
    public void clear() {
      this.tbName = null;
      this.qv = null;
      this.returnColumns = null;
    }

    public String getTbName() {
      return this.tbName;
    }

    public pointQuery_args setTbName(String tbName) {
      this.tbName = tbName;
      return this;
    }

    public void unsetTbName() {
      this.tbName = null;
    }

    /** Returns true if field tbName is set (has been assigned a value) and false otherwise */
    public boolean isSetTbName() {
      return this.tbName != null;
    }

    public void setTbNameIsSet(boolean value) {
      if (!value) {
        this.tbName = null;
      }
    }

    public int getQvSize() {
      return (this.qv == null) ? 0 : this.qv.size();
    }

    public java.util.Iterator<SPColumn> getQvIterator() {
      return (this.qv == null) ? null : this.qv.iterator();
    }

    public void addToQv(SPColumn elem) {
      if (this.qv == null) {
        this.qv = new ArrayList<SPColumn>();
      }
      this.qv.add(elem);
    }

    public List<SPColumn> getQv() {
      return this.qv;
    }

    public pointQuery_args setQv(List<SPColumn> qv) {
      this.qv = qv;
      return this;
    }

    public void unsetQv() {
      this.qv = null;
    }

    /** Returns true if field qv is set (has been assigned a value) and false otherwise */
    public boolean isSetQv() {
      return this.qv != null;
    }

    public void setQvIsSet(boolean value) {
      if (!value) {
        this.qv = null;
      }
    }

    public int getReturnColumnsSize() {
      return (this.returnColumns == null) ? 0 : this.returnColumns.size();
    }

    public java.util.Iterator<String> getReturnColumnsIterator() {
      return (this.returnColumns == null) ? null : this.returnColumns.iterator();
    }

    public void addToReturnColumns(String elem) {
      if (this.returnColumns == null) {
        this.returnColumns = new ArrayList<String>();
      }
      this.returnColumns.add(elem);
    }

    public List<String> getReturnColumns() {
      return this.returnColumns;
    }

    public pointQuery_args setReturnColumns(List<String> returnColumns) {
      this.returnColumns = returnColumns;
      return this;
    }

    public void unsetReturnColumns() {
      this.returnColumns = null;
    }

    /** Returns true if field returnColumns is set (has been assigned a value) and false otherwise */
    public boolean isSetReturnColumns() {
      return this.returnColumns != null;
    }

    public void setReturnColumnsIsSet(boolean value) {
      if (!value) {
        this.returnColumns = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TB_NAME:
        if (value == null) {
          unsetTbName();
        } else {
          setTbName((String)value);
        }
        break;

      case QV:
        if (value == null) {
          unsetQv();
        } else {
          setQv((List<SPColumn>)value);
        }
        break;

      case RETURN_COLUMNS:
        if (value == null) {
          unsetReturnColumns();
        } else {
          setReturnColumns((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TB_NAME:
        return getTbName();

      case QV:
        return getQv();

      case RETURN_COLUMNS:
        return getReturnColumns();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TB_NAME:
        return isSetTbName();
      case QV:
        return isSetQv();
      case RETURN_COLUMNS:
        return isSetReturnColumns();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pointQuery_args)
        return this.equals((pointQuery_args)that);
      return false;
    }

    public boolean equals(pointQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_tbName = true && this.isSetTbName();
      boolean that_present_tbName = true && that.isSetTbName();
      if (this_present_tbName || that_present_tbName) {
        if (!(this_present_tbName && that_present_tbName))
          return false;
        if (!this.tbName.equals(that.tbName))
          return false;
      }

      boolean this_present_qv = true && this.isSetQv();
      boolean that_present_qv = true && that.isSetQv();
      if (this_present_qv || that_present_qv) {
        if (!(this_present_qv && that_present_qv))
          return false;
        if (!this.qv.equals(that.qv))
          return false;
      }

      boolean this_present_returnColumns = true && this.isSetReturnColumns();
      boolean that_present_returnColumns = true && that.isSetReturnColumns();
      if (this_present_returnColumns || that_present_returnColumns) {
        if (!(this_present_returnColumns && that_present_returnColumns))
          return false;
        if (!this.returnColumns.equals(that.returnColumns))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(pointQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTbName()).compareTo(other.isSetTbName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTbName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbName, other.tbName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQv()).compareTo(other.isSetQv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qv, other.qv);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReturnColumns()).compareTo(other.isSetReturnColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReturnColumns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnColumns, other.returnColumns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pointQuery_args(");
      boolean first = true;

      sb.append("tbName:");
      if (this.tbName == null) {
        sb.append("null");
      } else {
        sb.append(this.tbName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qv:");
      if (this.qv == null) {
        sb.append("null");
      } else {
        sb.append(this.qv);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("returnColumns:");
      if (this.returnColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.returnColumns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pointQuery_argsStandardSchemeFactory implements SchemeFactory {
      public pointQuery_argsStandardScheme getScheme() {
        return new pointQuery_argsStandardScheme();
      }
    }

    private static class pointQuery_argsStandardScheme extends StandardScheme<pointQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pointQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TB_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tbName = iprot.readString();
                struct.setTbNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QV
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                  struct.qv = new ArrayList<SPColumn>(_list90.size);
                  for (int _i91 = 0; _i91 < _list90.size; ++_i91)
                  {
                    SPColumn _elem92;
                    _elem92 = new SPColumn();
                    _elem92.read(iprot);
                    struct.qv.add(_elem92);
                  }
                  iprot.readListEnd();
                }
                struct.setQvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RETURN_COLUMNS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list93 = iprot.readListBegin();
                  struct.returnColumns = new ArrayList<String>(_list93.size);
                  for (int _i94 = 0; _i94 < _list93.size; ++_i94)
                  {
                    String _elem95;
                    _elem95 = iprot.readString();
                    struct.returnColumns.add(_elem95);
                  }
                  iprot.readListEnd();
                }
                struct.setReturnColumnsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pointQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tbName != null) {
          oprot.writeFieldBegin(TB_NAME_FIELD_DESC);
          oprot.writeString(struct.tbName);
          oprot.writeFieldEnd();
        }
        if (struct.qv != null) {
          oprot.writeFieldBegin(QV_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.qv.size()));
            for (SPColumn _iter96 : struct.qv)
            {
              _iter96.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.returnColumns != null) {
          oprot.writeFieldBegin(RETURN_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.returnColumns.size()));
            for (String _iter97 : struct.returnColumns)
            {
              oprot.writeString(_iter97);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pointQuery_argsTupleSchemeFactory implements SchemeFactory {
      public pointQuery_argsTupleScheme getScheme() {
        return new pointQuery_argsTupleScheme();
      }
    }

    private static class pointQuery_argsTupleScheme extends TupleScheme<pointQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pointQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTbName()) {
          optionals.set(0);
        }
        if (struct.isSetQv()) {
          optionals.set(1);
        }
        if (struct.isSetReturnColumns()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTbName()) {
          oprot.writeString(struct.tbName);
        }
        if (struct.isSetQv()) {
          {
            oprot.writeI32(struct.qv.size());
            for (SPColumn _iter98 : struct.qv)
            {
              _iter98.write(oprot);
            }
          }
        }
        if (struct.isSetReturnColumns()) {
          {
            oprot.writeI32(struct.returnColumns.size());
            for (String _iter99 : struct.returnColumns)
            {
              oprot.writeString(_iter99);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pointQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.tbName = iprot.readString();
          struct.setTbNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list100 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.qv = new ArrayList<SPColumn>(_list100.size);
            for (int _i101 = 0; _i101 < _list100.size; ++_i101)
            {
              SPColumn _elem102;
              _elem102 = new SPColumn();
              _elem102.read(iprot);
              struct.qv.add(_elem102);
            }
          }
          struct.setQvIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.returnColumns = new ArrayList<String>(_list103.size);
            for (int _i104 = 0; _i104 < _list103.size; ++_i104)
            {
              String _elem105;
              _elem105 = iprot.readString();
              struct.returnColumns.add(_elem105);
            }
          }
          struct.setReturnColumnsIsSet(true);
        }
      }
    }

  }

  public static class pointQuery_result implements org.apache.thrift.TBase<pointQuery_result, pointQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<pointQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pointQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pointQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pointQuery_resultTupleSchemeFactory());
    }

    public List<SPKVObject> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SPKVObject.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pointQuery_result.class, metaDataMap);
    }

    public pointQuery_result() {
    }

    public pointQuery_result(
      List<SPKVObject> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pointQuery_result(pointQuery_result other) {
      if (other.isSetSuccess()) {
        List<SPKVObject> __this__success = new ArrayList<SPKVObject>(other.success.size());
        for (SPKVObject other_element : other.success) {
          __this__success.add(new SPKVObject(other_element));
        }
        this.success = __this__success;
      }
    }

    public pointQuery_result deepCopy() {
      return new pointQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SPKVObject> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SPKVObject elem) {
      if (this.success == null) {
        this.success = new ArrayList<SPKVObject>();
      }
      this.success.add(elem);
    }

    public List<SPKVObject> getSuccess() {
      return this.success;
    }

    public pointQuery_result setSuccess(List<SPKVObject> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SPKVObject>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pointQuery_result)
        return this.equals((pointQuery_result)that);
      return false;
    }

    public boolean equals(pointQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(pointQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pointQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pointQuery_resultStandardSchemeFactory implements SchemeFactory {
      public pointQuery_resultStandardScheme getScheme() {
        return new pointQuery_resultStandardScheme();
      }
    }

    private static class pointQuery_resultStandardScheme extends StandardScheme<pointQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pointQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                  struct.success = new ArrayList<SPKVObject>(_list106.size);
                  for (int _i107 = 0; _i107 < _list106.size; ++_i107)
                  {
                    SPKVObject _elem108;
                    _elem108 = new SPKVObject();
                    _elem108.read(iprot);
                    struct.success.add(_elem108);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pointQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SPKVObject _iter109 : struct.success)
            {
              _iter109.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pointQuery_resultTupleSchemeFactory implements SchemeFactory {
      public pointQuery_resultTupleScheme getScheme() {
        return new pointQuery_resultTupleScheme();
      }
    }

    private static class pointQuery_resultTupleScheme extends TupleScheme<pointQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pointQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SPKVObject _iter110 : struct.success)
            {
              _iter110.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pointQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list111 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SPKVObject>(_list111.size);
            for (int _i112 = 0; _i112 < _list111.size; ++_i112)
            {
              SPKVObject _elem113;
              _elem113 = new SPKVObject();
              _elem113.read(iprot);
              struct.success.add(_elem113);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rangeQueryCount_args implements org.apache.thrift.TBase<rangeQueryCount_args, rangeQueryCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<rangeQueryCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rangeQueryCount_args");

    private static final org.apache.thrift.protocol.TField TB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tbName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QL_FIELD_DESC = new org.apache.thrift.protocol.TField("ql", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField QU_FIELD_DESC = new org.apache.thrift.protocol.TField("qu", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rangeQueryCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rangeQueryCount_argsTupleSchemeFactory());
    }

    public String tbName; // required
    public List<SPColumn> ql; // required
    public List<SPColumn> qu; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TB_NAME((short)1, "tbName"),
      QL((short)2, "ql"),
      QU((short)3, "qu");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TB_NAME
            return TB_NAME;
          case 2: // QL
            return QL;
          case 3: // QU
            return QU;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TB_NAME, new org.apache.thrift.meta_data.FieldMetaData("tbName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QL, new org.apache.thrift.meta_data.FieldMetaData("ql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SPColumn.class))));
      tmpMap.put(_Fields.QU, new org.apache.thrift.meta_data.FieldMetaData("qu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SPColumn.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rangeQueryCount_args.class, metaDataMap);
    }

    public rangeQueryCount_args() {
    }

    public rangeQueryCount_args(
      String tbName,
      List<SPColumn> ql,
      List<SPColumn> qu)
    {
      this();
      this.tbName = tbName;
      this.ql = ql;
      this.qu = qu;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rangeQueryCount_args(rangeQueryCount_args other) {
      if (other.isSetTbName()) {
        this.tbName = other.tbName;
      }
      if (other.isSetQl()) {
        List<SPColumn> __this__ql = new ArrayList<SPColumn>(other.ql.size());
        for (SPColumn other_element : other.ql) {
          __this__ql.add(new SPColumn(other_element));
        }
        this.ql = __this__ql;
      }
      if (other.isSetQu()) {
        List<SPColumn> __this__qu = new ArrayList<SPColumn>(other.qu.size());
        for (SPColumn other_element : other.qu) {
          __this__qu.add(new SPColumn(other_element));
        }
        this.qu = __this__qu;
      }
    }

    public rangeQueryCount_args deepCopy() {
      return new rangeQueryCount_args(this);
    }

    @Override
    public void clear() {
      this.tbName = null;
      this.ql = null;
      this.qu = null;
    }

    public String getTbName() {
      return this.tbName;
    }

    public rangeQueryCount_args setTbName(String tbName) {
      this.tbName = tbName;
      return this;
    }

    public void unsetTbName() {
      this.tbName = null;
    }

    /** Returns true if field tbName is set (has been assigned a value) and false otherwise */
    public boolean isSetTbName() {
      return this.tbName != null;
    }

    public void setTbNameIsSet(boolean value) {
      if (!value) {
        this.tbName = null;
      }
    }

    public int getQlSize() {
      return (this.ql == null) ? 0 : this.ql.size();
    }

    public java.util.Iterator<SPColumn> getQlIterator() {
      return (this.ql == null) ? null : this.ql.iterator();
    }

    public void addToQl(SPColumn elem) {
      if (this.ql == null) {
        this.ql = new ArrayList<SPColumn>();
      }
      this.ql.add(elem);
    }

    public List<SPColumn> getQl() {
      return this.ql;
    }

    public rangeQueryCount_args setQl(List<SPColumn> ql) {
      this.ql = ql;
      return this;
    }

    public void unsetQl() {
      this.ql = null;
    }

    /** Returns true if field ql is set (has been assigned a value) and false otherwise */
    public boolean isSetQl() {
      return this.ql != null;
    }

    public void setQlIsSet(boolean value) {
      if (!value) {
        this.ql = null;
      }
    }

    public int getQuSize() {
      return (this.qu == null) ? 0 : this.qu.size();
    }

    public java.util.Iterator<SPColumn> getQuIterator() {
      return (this.qu == null) ? null : this.qu.iterator();
    }

    public void addToQu(SPColumn elem) {
      if (this.qu == null) {
        this.qu = new ArrayList<SPColumn>();
      }
      this.qu.add(elem);
    }

    public List<SPColumn> getQu() {
      return this.qu;
    }

    public rangeQueryCount_args setQu(List<SPColumn> qu) {
      this.qu = qu;
      return this;
    }

    public void unsetQu() {
      this.qu = null;
    }

    /** Returns true if field qu is set (has been assigned a value) and false otherwise */
    public boolean isSetQu() {
      return this.qu != null;
    }

    public void setQuIsSet(boolean value) {
      if (!value) {
        this.qu = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TB_NAME:
        if (value == null) {
          unsetTbName();
        } else {
          setTbName((String)value);
        }
        break;

      case QL:
        if (value == null) {
          unsetQl();
        } else {
          setQl((List<SPColumn>)value);
        }
        break;

      case QU:
        if (value == null) {
          unsetQu();
        } else {
          setQu((List<SPColumn>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TB_NAME:
        return getTbName();

      case QL:
        return getQl();

      case QU:
        return getQu();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TB_NAME:
        return isSetTbName();
      case QL:
        return isSetQl();
      case QU:
        return isSetQu();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rangeQueryCount_args)
        return this.equals((rangeQueryCount_args)that);
      return false;
    }

    public boolean equals(rangeQueryCount_args that) {
      if (that == null)
        return false;

      boolean this_present_tbName = true && this.isSetTbName();
      boolean that_present_tbName = true && that.isSetTbName();
      if (this_present_tbName || that_present_tbName) {
        if (!(this_present_tbName && that_present_tbName))
          return false;
        if (!this.tbName.equals(that.tbName))
          return false;
      }

      boolean this_present_ql = true && this.isSetQl();
      boolean that_present_ql = true && that.isSetQl();
      if (this_present_ql || that_present_ql) {
        if (!(this_present_ql && that_present_ql))
          return false;
        if (!this.ql.equals(that.ql))
          return false;
      }

      boolean this_present_qu = true && this.isSetQu();
      boolean that_present_qu = true && that.isSetQu();
      if (this_present_qu || that_present_qu) {
        if (!(this_present_qu && that_present_qu))
          return false;
        if (!this.qu.equals(that.qu))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(rangeQueryCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTbName()).compareTo(other.isSetTbName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTbName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbName, other.tbName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQl()).compareTo(other.isSetQl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ql, other.ql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQu()).compareTo(other.isSetQu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qu, other.qu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rangeQueryCount_args(");
      boolean first = true;

      sb.append("tbName:");
      if (this.tbName == null) {
        sb.append("null");
      } else {
        sb.append(this.tbName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ql:");
      if (this.ql == null) {
        sb.append("null");
      } else {
        sb.append(this.ql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qu:");
      if (this.qu == null) {
        sb.append("null");
      } else {
        sb.append(this.qu);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rangeQueryCount_argsStandardSchemeFactory implements SchemeFactory {
      public rangeQueryCount_argsStandardScheme getScheme() {
        return new rangeQueryCount_argsStandardScheme();
      }
    }

    private static class rangeQueryCount_argsStandardScheme extends StandardScheme<rangeQueryCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rangeQueryCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TB_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tbName = iprot.readString();
                struct.setTbNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list114 = iprot.readListBegin();
                  struct.ql = new ArrayList<SPColumn>(_list114.size);
                  for (int _i115 = 0; _i115 < _list114.size; ++_i115)
                  {
                    SPColumn _elem116;
                    _elem116 = new SPColumn();
                    _elem116.read(iprot);
                    struct.ql.add(_elem116);
                  }
                  iprot.readListEnd();
                }
                struct.setQlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // QU
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list117 = iprot.readListBegin();
                  struct.qu = new ArrayList<SPColumn>(_list117.size);
                  for (int _i118 = 0; _i118 < _list117.size; ++_i118)
                  {
                    SPColumn _elem119;
                    _elem119 = new SPColumn();
                    _elem119.read(iprot);
                    struct.qu.add(_elem119);
                  }
                  iprot.readListEnd();
                }
                struct.setQuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rangeQueryCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tbName != null) {
          oprot.writeFieldBegin(TB_NAME_FIELD_DESC);
          oprot.writeString(struct.tbName);
          oprot.writeFieldEnd();
        }
        if (struct.ql != null) {
          oprot.writeFieldBegin(QL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ql.size()));
            for (SPColumn _iter120 : struct.ql)
            {
              _iter120.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qu != null) {
          oprot.writeFieldBegin(QU_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.qu.size()));
            for (SPColumn _iter121 : struct.qu)
            {
              _iter121.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rangeQueryCount_argsTupleSchemeFactory implements SchemeFactory {
      public rangeQueryCount_argsTupleScheme getScheme() {
        return new rangeQueryCount_argsTupleScheme();
      }
    }

    private static class rangeQueryCount_argsTupleScheme extends TupleScheme<rangeQueryCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rangeQueryCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTbName()) {
          optionals.set(0);
        }
        if (struct.isSetQl()) {
          optionals.set(1);
        }
        if (struct.isSetQu()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTbName()) {
          oprot.writeString(struct.tbName);
        }
        if (struct.isSetQl()) {
          {
            oprot.writeI32(struct.ql.size());
            for (SPColumn _iter122 : struct.ql)
            {
              _iter122.write(oprot);
            }
          }
        }
        if (struct.isSetQu()) {
          {
            oprot.writeI32(struct.qu.size());
            for (SPColumn _iter123 : struct.qu)
            {
              _iter123.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rangeQueryCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.tbName = iprot.readString();
          struct.setTbNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list124 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.ql = new ArrayList<SPColumn>(_list124.size);
            for (int _i125 = 0; _i125 < _list124.size; ++_i125)
            {
              SPColumn _elem126;
              _elem126 = new SPColumn();
              _elem126.read(iprot);
              struct.ql.add(_elem126);
            }
          }
          struct.setQlIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.qu = new ArrayList<SPColumn>(_list127.size);
            for (int _i128 = 0; _i128 < _list127.size; ++_i128)
            {
              SPColumn _elem129;
              _elem129 = new SPColumn();
              _elem129.read(iprot);
              struct.qu.add(_elem129);
            }
          }
          struct.setQuIsSet(true);
        }
      }
    }

  }

  public static class rangeQueryCount_result implements org.apache.thrift.TBase<rangeQueryCount_result, rangeQueryCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<rangeQueryCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rangeQueryCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rangeQueryCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rangeQueryCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rangeQueryCount_result.class, metaDataMap);
    }

    public rangeQueryCount_result() {
    }

    public rangeQueryCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rangeQueryCount_result(rangeQueryCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public rangeQueryCount_result deepCopy() {
      return new rangeQueryCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public rangeQueryCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rangeQueryCount_result)
        return this.equals((rangeQueryCount_result)that);
      return false;
    }

    public boolean equals(rangeQueryCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(rangeQueryCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rangeQueryCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rangeQueryCount_resultStandardSchemeFactory implements SchemeFactory {
      public rangeQueryCount_resultStandardScheme getScheme() {
        return new rangeQueryCount_resultStandardScheme();
      }
    }

    private static class rangeQueryCount_resultStandardScheme extends StandardScheme<rangeQueryCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rangeQueryCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rangeQueryCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rangeQueryCount_resultTupleSchemeFactory implements SchemeFactory {
      public rangeQueryCount_resultTupleScheme getScheme() {
        return new rangeQueryCount_resultTupleScheme();
      }
    }

    private static class rangeQueryCount_resultTupleScheme extends TupleScheme<rangeQueryCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rangeQueryCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rangeQueryCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rangeQuery_args implements org.apache.thrift.TBase<rangeQuery_args, rangeQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<rangeQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rangeQuery_args");

    private static final org.apache.thrift.protocol.TField TB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tbName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QL_FIELD_DESC = new org.apache.thrift.protocol.TField("ql", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField QU_FIELD_DESC = new org.apache.thrift.protocol.TField("qu", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField RETURN_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("returnColumns", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rangeQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rangeQuery_argsTupleSchemeFactory());
    }

    public String tbName; // required
    public List<SPColumn> ql; // required
    public List<SPColumn> qu; // required
    public List<String> returnColumns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TB_NAME((short)1, "tbName"),
      QL((short)2, "ql"),
      QU((short)3, "qu"),
      RETURN_COLUMNS((short)4, "returnColumns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TB_NAME
            return TB_NAME;
          case 2: // QL
            return QL;
          case 3: // QU
            return QU;
          case 4: // RETURN_COLUMNS
            return RETURN_COLUMNS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TB_NAME, new org.apache.thrift.meta_data.FieldMetaData("tbName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QL, new org.apache.thrift.meta_data.FieldMetaData("ql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SPColumn.class))));
      tmpMap.put(_Fields.QU, new org.apache.thrift.meta_data.FieldMetaData("qu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SPColumn.class))));
      tmpMap.put(_Fields.RETURN_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("returnColumns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rangeQuery_args.class, metaDataMap);
    }

    public rangeQuery_args() {
    }

    public rangeQuery_args(
      String tbName,
      List<SPColumn> ql,
      List<SPColumn> qu,
      List<String> returnColumns)
    {
      this();
      this.tbName = tbName;
      this.ql = ql;
      this.qu = qu;
      this.returnColumns = returnColumns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rangeQuery_args(rangeQuery_args other) {
      if (other.isSetTbName()) {
        this.tbName = other.tbName;
      }
      if (other.isSetQl()) {
        List<SPColumn> __this__ql = new ArrayList<SPColumn>(other.ql.size());
        for (SPColumn other_element : other.ql) {
          __this__ql.add(new SPColumn(other_element));
        }
        this.ql = __this__ql;
      }
      if (other.isSetQu()) {
        List<SPColumn> __this__qu = new ArrayList<SPColumn>(other.qu.size());
        for (SPColumn other_element : other.qu) {
          __this__qu.add(new SPColumn(other_element));
        }
        this.qu = __this__qu;
      }
      if (other.isSetReturnColumns()) {
        List<String> __this__returnColumns = new ArrayList<String>(other.returnColumns);
        this.returnColumns = __this__returnColumns;
      }
    }

    public rangeQuery_args deepCopy() {
      return new rangeQuery_args(this);
    }

    @Override
    public void clear() {
      this.tbName = null;
      this.ql = null;
      this.qu = null;
      this.returnColumns = null;
    }

    public String getTbName() {
      return this.tbName;
    }

    public rangeQuery_args setTbName(String tbName) {
      this.tbName = tbName;
      return this;
    }

    public void unsetTbName() {
      this.tbName = null;
    }

    /** Returns true if field tbName is set (has been assigned a value) and false otherwise */
    public boolean isSetTbName() {
      return this.tbName != null;
    }

    public void setTbNameIsSet(boolean value) {
      if (!value) {
        this.tbName = null;
      }
    }

    public int getQlSize() {
      return (this.ql == null) ? 0 : this.ql.size();
    }

    public java.util.Iterator<SPColumn> getQlIterator() {
      return (this.ql == null) ? null : this.ql.iterator();
    }

    public void addToQl(SPColumn elem) {
      if (this.ql == null) {
        this.ql = new ArrayList<SPColumn>();
      }
      this.ql.add(elem);
    }

    public List<SPColumn> getQl() {
      return this.ql;
    }

    public rangeQuery_args setQl(List<SPColumn> ql) {
      this.ql = ql;
      return this;
    }

    public void unsetQl() {
      this.ql = null;
    }

    /** Returns true if field ql is set (has been assigned a value) and false otherwise */
    public boolean isSetQl() {
      return this.ql != null;
    }

    public void setQlIsSet(boolean value) {
      if (!value) {
        this.ql = null;
      }
    }

    public int getQuSize() {
      return (this.qu == null) ? 0 : this.qu.size();
    }

    public java.util.Iterator<SPColumn> getQuIterator() {
      return (this.qu == null) ? null : this.qu.iterator();
    }

    public void addToQu(SPColumn elem) {
      if (this.qu == null) {
        this.qu = new ArrayList<SPColumn>();
      }
      this.qu.add(elem);
    }

    public List<SPColumn> getQu() {
      return this.qu;
    }

    public rangeQuery_args setQu(List<SPColumn> qu) {
      this.qu = qu;
      return this;
    }

    public void unsetQu() {
      this.qu = null;
    }

    /** Returns true if field qu is set (has been assigned a value) and false otherwise */
    public boolean isSetQu() {
      return this.qu != null;
    }

    public void setQuIsSet(boolean value) {
      if (!value) {
        this.qu = null;
      }
    }

    public int getReturnColumnsSize() {
      return (this.returnColumns == null) ? 0 : this.returnColumns.size();
    }

    public java.util.Iterator<String> getReturnColumnsIterator() {
      return (this.returnColumns == null) ? null : this.returnColumns.iterator();
    }

    public void addToReturnColumns(String elem) {
      if (this.returnColumns == null) {
        this.returnColumns = new ArrayList<String>();
      }
      this.returnColumns.add(elem);
    }

    public List<String> getReturnColumns() {
      return this.returnColumns;
    }

    public rangeQuery_args setReturnColumns(List<String> returnColumns) {
      this.returnColumns = returnColumns;
      return this;
    }

    public void unsetReturnColumns() {
      this.returnColumns = null;
    }

    /** Returns true if field returnColumns is set (has been assigned a value) and false otherwise */
    public boolean isSetReturnColumns() {
      return this.returnColumns != null;
    }

    public void setReturnColumnsIsSet(boolean value) {
      if (!value) {
        this.returnColumns = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TB_NAME:
        if (value == null) {
          unsetTbName();
        } else {
          setTbName((String)value);
        }
        break;

      case QL:
        if (value == null) {
          unsetQl();
        } else {
          setQl((List<SPColumn>)value);
        }
        break;

      case QU:
        if (value == null) {
          unsetQu();
        } else {
          setQu((List<SPColumn>)value);
        }
        break;

      case RETURN_COLUMNS:
        if (value == null) {
          unsetReturnColumns();
        } else {
          setReturnColumns((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TB_NAME:
        return getTbName();

      case QL:
        return getQl();

      case QU:
        return getQu();

      case RETURN_COLUMNS:
        return getReturnColumns();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TB_NAME:
        return isSetTbName();
      case QL:
        return isSetQl();
      case QU:
        return isSetQu();
      case RETURN_COLUMNS:
        return isSetReturnColumns();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rangeQuery_args)
        return this.equals((rangeQuery_args)that);
      return false;
    }

    public boolean equals(rangeQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_tbName = true && this.isSetTbName();
      boolean that_present_tbName = true && that.isSetTbName();
      if (this_present_tbName || that_present_tbName) {
        if (!(this_present_tbName && that_present_tbName))
          return false;
        if (!this.tbName.equals(that.tbName))
          return false;
      }

      boolean this_present_ql = true && this.isSetQl();
      boolean that_present_ql = true && that.isSetQl();
      if (this_present_ql || that_present_ql) {
        if (!(this_present_ql && that_present_ql))
          return false;
        if (!this.ql.equals(that.ql))
          return false;
      }

      boolean this_present_qu = true && this.isSetQu();
      boolean that_present_qu = true && that.isSetQu();
      if (this_present_qu || that_present_qu) {
        if (!(this_present_qu && that_present_qu))
          return false;
        if (!this.qu.equals(that.qu))
          return false;
      }

      boolean this_present_returnColumns = true && this.isSetReturnColumns();
      boolean that_present_returnColumns = true && that.isSetReturnColumns();
      if (this_present_returnColumns || that_present_returnColumns) {
        if (!(this_present_returnColumns && that_present_returnColumns))
          return false;
        if (!this.returnColumns.equals(that.returnColumns))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(rangeQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTbName()).compareTo(other.isSetTbName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTbName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbName, other.tbName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQl()).compareTo(other.isSetQl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ql, other.ql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQu()).compareTo(other.isSetQu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qu, other.qu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReturnColumns()).compareTo(other.isSetReturnColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReturnColumns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnColumns, other.returnColumns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rangeQuery_args(");
      boolean first = true;

      sb.append("tbName:");
      if (this.tbName == null) {
        sb.append("null");
      } else {
        sb.append(this.tbName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ql:");
      if (this.ql == null) {
        sb.append("null");
      } else {
        sb.append(this.ql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qu:");
      if (this.qu == null) {
        sb.append("null");
      } else {
        sb.append(this.qu);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("returnColumns:");
      if (this.returnColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.returnColumns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rangeQuery_argsStandardSchemeFactory implements SchemeFactory {
      public rangeQuery_argsStandardScheme getScheme() {
        return new rangeQuery_argsStandardScheme();
      }
    }

    private static class rangeQuery_argsStandardScheme extends StandardScheme<rangeQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rangeQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TB_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tbName = iprot.readString();
                struct.setTbNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                  struct.ql = new ArrayList<SPColumn>(_list130.size);
                  for (int _i131 = 0; _i131 < _list130.size; ++_i131)
                  {
                    SPColumn _elem132;
                    _elem132 = new SPColumn();
                    _elem132.read(iprot);
                    struct.ql.add(_elem132);
                  }
                  iprot.readListEnd();
                }
                struct.setQlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // QU
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list133 = iprot.readListBegin();
                  struct.qu = new ArrayList<SPColumn>(_list133.size);
                  for (int _i134 = 0; _i134 < _list133.size; ++_i134)
                  {
                    SPColumn _elem135;
                    _elem135 = new SPColumn();
                    _elem135.read(iprot);
                    struct.qu.add(_elem135);
                  }
                  iprot.readListEnd();
                }
                struct.setQuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RETURN_COLUMNS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                  struct.returnColumns = new ArrayList<String>(_list136.size);
                  for (int _i137 = 0; _i137 < _list136.size; ++_i137)
                  {
                    String _elem138;
                    _elem138 = iprot.readString();
                    struct.returnColumns.add(_elem138);
                  }
                  iprot.readListEnd();
                }
                struct.setReturnColumnsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rangeQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tbName != null) {
          oprot.writeFieldBegin(TB_NAME_FIELD_DESC);
          oprot.writeString(struct.tbName);
          oprot.writeFieldEnd();
        }
        if (struct.ql != null) {
          oprot.writeFieldBegin(QL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ql.size()));
            for (SPColumn _iter139 : struct.ql)
            {
              _iter139.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qu != null) {
          oprot.writeFieldBegin(QU_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.qu.size()));
            for (SPColumn _iter140 : struct.qu)
            {
              _iter140.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.returnColumns != null) {
          oprot.writeFieldBegin(RETURN_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.returnColumns.size()));
            for (String _iter141 : struct.returnColumns)
            {
              oprot.writeString(_iter141);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rangeQuery_argsTupleSchemeFactory implements SchemeFactory {
      public rangeQuery_argsTupleScheme getScheme() {
        return new rangeQuery_argsTupleScheme();
      }
    }

    private static class rangeQuery_argsTupleScheme extends TupleScheme<rangeQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rangeQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTbName()) {
          optionals.set(0);
        }
        if (struct.isSetQl()) {
          optionals.set(1);
        }
        if (struct.isSetQu()) {
          optionals.set(2);
        }
        if (struct.isSetReturnColumns()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTbName()) {
          oprot.writeString(struct.tbName);
        }
        if (struct.isSetQl()) {
          {
            oprot.writeI32(struct.ql.size());
            for (SPColumn _iter142 : struct.ql)
            {
              _iter142.write(oprot);
            }
          }
        }
        if (struct.isSetQu()) {
          {
            oprot.writeI32(struct.qu.size());
            for (SPColumn _iter143 : struct.qu)
            {
              _iter143.write(oprot);
            }
          }
        }
        if (struct.isSetReturnColumns()) {
          {
            oprot.writeI32(struct.returnColumns.size());
            for (String _iter144 : struct.returnColumns)
            {
              oprot.writeString(_iter144);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rangeQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.tbName = iprot.readString();
          struct.setTbNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list145 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.ql = new ArrayList<SPColumn>(_list145.size);
            for (int _i146 = 0; _i146 < _list145.size; ++_i146)
            {
              SPColumn _elem147;
              _elem147 = new SPColumn();
              _elem147.read(iprot);
              struct.ql.add(_elem147);
            }
          }
          struct.setQlIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list148 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.qu = new ArrayList<SPColumn>(_list148.size);
            for (int _i149 = 0; _i149 < _list148.size; ++_i149)
            {
              SPColumn _elem150;
              _elem150 = new SPColumn();
              _elem150.read(iprot);
              struct.qu.add(_elem150);
            }
          }
          struct.setQuIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list151 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.returnColumns = new ArrayList<String>(_list151.size);
            for (int _i152 = 0; _i152 < _list151.size; ++_i152)
            {
              String _elem153;
              _elem153 = iprot.readString();
              struct.returnColumns.add(_elem153);
            }
          }
          struct.setReturnColumnsIsSet(true);
        }
      }
    }

  }

  public static class rangeQuery_result implements org.apache.thrift.TBase<rangeQuery_result, rangeQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<rangeQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rangeQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rangeQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rangeQuery_resultTupleSchemeFactory());
    }

    public List<SPKVObject> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SPKVObject.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rangeQuery_result.class, metaDataMap);
    }

    public rangeQuery_result() {
    }

    public rangeQuery_result(
      List<SPKVObject> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rangeQuery_result(rangeQuery_result other) {
      if (other.isSetSuccess()) {
        List<SPKVObject> __this__success = new ArrayList<SPKVObject>(other.success.size());
        for (SPKVObject other_element : other.success) {
          __this__success.add(new SPKVObject(other_element));
        }
        this.success = __this__success;
      }
    }

    public rangeQuery_result deepCopy() {
      return new rangeQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SPKVObject> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SPKVObject elem) {
      if (this.success == null) {
        this.success = new ArrayList<SPKVObject>();
      }
      this.success.add(elem);
    }

    public List<SPKVObject> getSuccess() {
      return this.success;
    }

    public rangeQuery_result setSuccess(List<SPKVObject> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SPKVObject>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rangeQuery_result)
        return this.equals((rangeQuery_result)that);
      return false;
    }

    public boolean equals(rangeQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(rangeQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rangeQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rangeQuery_resultStandardSchemeFactory implements SchemeFactory {
      public rangeQuery_resultStandardScheme getScheme() {
        return new rangeQuery_resultStandardScheme();
      }
    }

    private static class rangeQuery_resultStandardScheme extends StandardScheme<rangeQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rangeQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list154 = iprot.readListBegin();
                  struct.success = new ArrayList<SPKVObject>(_list154.size);
                  for (int _i155 = 0; _i155 < _list154.size; ++_i155)
                  {
                    SPKVObject _elem156;
                    _elem156 = new SPKVObject();
                    _elem156.read(iprot);
                    struct.success.add(_elem156);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rangeQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SPKVObject _iter157 : struct.success)
            {
              _iter157.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rangeQuery_resultTupleSchemeFactory implements SchemeFactory {
      public rangeQuery_resultTupleScheme getScheme() {
        return new rangeQuery_resultTupleScheme();
      }
    }

    private static class rangeQuery_resultTupleScheme extends TupleScheme<rangeQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rangeQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SPKVObject _iter158 : struct.success)
            {
              _iter158.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rangeQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list159 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SPKVObject>(_list159.size);
            for (int _i160 = 0; _i160 < _list159.size; ++_i160)
            {
              SPKVObject _elem161;
              _elem161 = new SPKVObject();
              _elem161.read(iprot);
              struct.success.add(_elem161);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class knnQuery_args implements org.apache.thrift.TBase<knnQuery_args, knnQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<knnQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("knnQuery_args");

    private static final org.apache.thrift.protocol.TField TB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tbName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QV_FIELD_DESC = new org.apache.thrift.protocol.TField("qv", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField K_FIELD_DESC = new org.apache.thrift.protocol.TField("K", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField RETURN_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("returnColumns", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new knnQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new knnQuery_argsTupleSchemeFactory());
    }

    public String tbName; // required
    public List<SPColumn> qv; // required
    public int K; // required
    public List<String> returnColumns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TB_NAME((short)1, "tbName"),
      QV((short)2, "qv"),
      K((short)3, "K"),
      RETURN_COLUMNS((short)4, "returnColumns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TB_NAME
            return TB_NAME;
          case 2: // QV
            return QV;
          case 3: // K
            return K;
          case 4: // RETURN_COLUMNS
            return RETURN_COLUMNS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __K_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TB_NAME, new org.apache.thrift.meta_data.FieldMetaData("tbName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QV, new org.apache.thrift.meta_data.FieldMetaData("qv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SPColumn.class))));
      tmpMap.put(_Fields.K, new org.apache.thrift.meta_data.FieldMetaData("K", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RETURN_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("returnColumns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(knnQuery_args.class, metaDataMap);
    }

    public knnQuery_args() {
    }

    public knnQuery_args(
      String tbName,
      List<SPColumn> qv,
      int K,
      List<String> returnColumns)
    {
      this();
      this.tbName = tbName;
      this.qv = qv;
      this.K = K;
      setKIsSet(true);
      this.returnColumns = returnColumns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public knnQuery_args(knnQuery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTbName()) {
        this.tbName = other.tbName;
      }
      if (other.isSetQv()) {
        List<SPColumn> __this__qv = new ArrayList<SPColumn>(other.qv.size());
        for (SPColumn other_element : other.qv) {
          __this__qv.add(new SPColumn(other_element));
        }
        this.qv = __this__qv;
      }
      this.K = other.K;
      if (other.isSetReturnColumns()) {
        List<String> __this__returnColumns = new ArrayList<String>(other.returnColumns);
        this.returnColumns = __this__returnColumns;
      }
    }

    public knnQuery_args deepCopy() {
      return new knnQuery_args(this);
    }

    @Override
    public void clear() {
      this.tbName = null;
      this.qv = null;
      setKIsSet(false);
      this.K = 0;
      this.returnColumns = null;
    }

    public String getTbName() {
      return this.tbName;
    }

    public knnQuery_args setTbName(String tbName) {
      this.tbName = tbName;
      return this;
    }

    public void unsetTbName() {
      this.tbName = null;
    }

    /** Returns true if field tbName is set (has been assigned a value) and false otherwise */
    public boolean isSetTbName() {
      return this.tbName != null;
    }

    public void setTbNameIsSet(boolean value) {
      if (!value) {
        this.tbName = null;
      }
    }

    public int getQvSize() {
      return (this.qv == null) ? 0 : this.qv.size();
    }

    public java.util.Iterator<SPColumn> getQvIterator() {
      return (this.qv == null) ? null : this.qv.iterator();
    }

    public void addToQv(SPColumn elem) {
      if (this.qv == null) {
        this.qv = new ArrayList<SPColumn>();
      }
      this.qv.add(elem);
    }

    public List<SPColumn> getQv() {
      return this.qv;
    }

    public knnQuery_args setQv(List<SPColumn> qv) {
      this.qv = qv;
      return this;
    }

    public void unsetQv() {
      this.qv = null;
    }

    /** Returns true if field qv is set (has been assigned a value) and false otherwise */
    public boolean isSetQv() {
      return this.qv != null;
    }

    public void setQvIsSet(boolean value) {
      if (!value) {
        this.qv = null;
      }
    }

    public int getK() {
      return this.K;
    }

    public knnQuery_args setK(int K) {
      this.K = K;
      setKIsSet(true);
      return this;
    }

    public void unsetK() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __K_ISSET_ID);
    }

    /** Returns true if field K is set (has been assigned a value) and false otherwise */
    public boolean isSetK() {
      return EncodingUtils.testBit(__isset_bitfield, __K_ISSET_ID);
    }

    public void setKIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __K_ISSET_ID, value);
    }

    public int getReturnColumnsSize() {
      return (this.returnColumns == null) ? 0 : this.returnColumns.size();
    }

    public java.util.Iterator<String> getReturnColumnsIterator() {
      return (this.returnColumns == null) ? null : this.returnColumns.iterator();
    }

    public void addToReturnColumns(String elem) {
      if (this.returnColumns == null) {
        this.returnColumns = new ArrayList<String>();
      }
      this.returnColumns.add(elem);
    }

    public List<String> getReturnColumns() {
      return this.returnColumns;
    }

    public knnQuery_args setReturnColumns(List<String> returnColumns) {
      this.returnColumns = returnColumns;
      return this;
    }

    public void unsetReturnColumns() {
      this.returnColumns = null;
    }

    /** Returns true if field returnColumns is set (has been assigned a value) and false otherwise */
    public boolean isSetReturnColumns() {
      return this.returnColumns != null;
    }

    public void setReturnColumnsIsSet(boolean value) {
      if (!value) {
        this.returnColumns = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TB_NAME:
        if (value == null) {
          unsetTbName();
        } else {
          setTbName((String)value);
        }
        break;

      case QV:
        if (value == null) {
          unsetQv();
        } else {
          setQv((List<SPColumn>)value);
        }
        break;

      case K:
        if (value == null) {
          unsetK();
        } else {
          setK((Integer)value);
        }
        break;

      case RETURN_COLUMNS:
        if (value == null) {
          unsetReturnColumns();
        } else {
          setReturnColumns((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TB_NAME:
        return getTbName();

      case QV:
        return getQv();

      case K:
        return Integer.valueOf(getK());

      case RETURN_COLUMNS:
        return getReturnColumns();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TB_NAME:
        return isSetTbName();
      case QV:
        return isSetQv();
      case K:
        return isSetK();
      case RETURN_COLUMNS:
        return isSetReturnColumns();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof knnQuery_args)
        return this.equals((knnQuery_args)that);
      return false;
    }

    public boolean equals(knnQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_tbName = true && this.isSetTbName();
      boolean that_present_tbName = true && that.isSetTbName();
      if (this_present_tbName || that_present_tbName) {
        if (!(this_present_tbName && that_present_tbName))
          return false;
        if (!this.tbName.equals(that.tbName))
          return false;
      }

      boolean this_present_qv = true && this.isSetQv();
      boolean that_present_qv = true && that.isSetQv();
      if (this_present_qv || that_present_qv) {
        if (!(this_present_qv && that_present_qv))
          return false;
        if (!this.qv.equals(that.qv))
          return false;
      }

      boolean this_present_K = true;
      boolean that_present_K = true;
      if (this_present_K || that_present_K) {
        if (!(this_present_K && that_present_K))
          return false;
        if (this.K != that.K)
          return false;
      }

      boolean this_present_returnColumns = true && this.isSetReturnColumns();
      boolean that_present_returnColumns = true && that.isSetReturnColumns();
      if (this_present_returnColumns || that_present_returnColumns) {
        if (!(this_present_returnColumns && that_present_returnColumns))
          return false;
        if (!this.returnColumns.equals(that.returnColumns))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(knnQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTbName()).compareTo(other.isSetTbName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTbName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbName, other.tbName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQv()).compareTo(other.isSetQv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qv, other.qv);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetK()).compareTo(other.isSetK());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetK()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.K, other.K);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReturnColumns()).compareTo(other.isSetReturnColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReturnColumns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnColumns, other.returnColumns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("knnQuery_args(");
      boolean first = true;

      sb.append("tbName:");
      if (this.tbName == null) {
        sb.append("null");
      } else {
        sb.append(this.tbName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qv:");
      if (this.qv == null) {
        sb.append("null");
      } else {
        sb.append(this.qv);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("K:");
      sb.append(this.K);
      first = false;
      if (!first) sb.append(", ");
      sb.append("returnColumns:");
      if (this.returnColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.returnColumns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class knnQuery_argsStandardSchemeFactory implements SchemeFactory {
      public knnQuery_argsStandardScheme getScheme() {
        return new knnQuery_argsStandardScheme();
      }
    }

    private static class knnQuery_argsStandardScheme extends StandardScheme<knnQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, knnQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TB_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tbName = iprot.readString();
                struct.setTbNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QV
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list162 = iprot.readListBegin();
                  struct.qv = new ArrayList<SPColumn>(_list162.size);
                  for (int _i163 = 0; _i163 < _list162.size; ++_i163)
                  {
                    SPColumn _elem164;
                    _elem164 = new SPColumn();
                    _elem164.read(iprot);
                    struct.qv.add(_elem164);
                  }
                  iprot.readListEnd();
                }
                struct.setQvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // K
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.K = iprot.readI32();
                struct.setKIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RETURN_COLUMNS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list165 = iprot.readListBegin();
                  struct.returnColumns = new ArrayList<String>(_list165.size);
                  for (int _i166 = 0; _i166 < _list165.size; ++_i166)
                  {
                    String _elem167;
                    _elem167 = iprot.readString();
                    struct.returnColumns.add(_elem167);
                  }
                  iprot.readListEnd();
                }
                struct.setReturnColumnsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, knnQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tbName != null) {
          oprot.writeFieldBegin(TB_NAME_FIELD_DESC);
          oprot.writeString(struct.tbName);
          oprot.writeFieldEnd();
        }
        if (struct.qv != null) {
          oprot.writeFieldBegin(QV_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.qv.size()));
            for (SPColumn _iter168 : struct.qv)
            {
              _iter168.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(K_FIELD_DESC);
        oprot.writeI32(struct.K);
        oprot.writeFieldEnd();
        if (struct.returnColumns != null) {
          oprot.writeFieldBegin(RETURN_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.returnColumns.size()));
            for (String _iter169 : struct.returnColumns)
            {
              oprot.writeString(_iter169);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class knnQuery_argsTupleSchemeFactory implements SchemeFactory {
      public knnQuery_argsTupleScheme getScheme() {
        return new knnQuery_argsTupleScheme();
      }
    }

    private static class knnQuery_argsTupleScheme extends TupleScheme<knnQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, knnQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTbName()) {
          optionals.set(0);
        }
        if (struct.isSetQv()) {
          optionals.set(1);
        }
        if (struct.isSetK()) {
          optionals.set(2);
        }
        if (struct.isSetReturnColumns()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTbName()) {
          oprot.writeString(struct.tbName);
        }
        if (struct.isSetQv()) {
          {
            oprot.writeI32(struct.qv.size());
            for (SPColumn _iter170 : struct.qv)
            {
              _iter170.write(oprot);
            }
          }
        }
        if (struct.isSetK()) {
          oprot.writeI32(struct.K);
        }
        if (struct.isSetReturnColumns()) {
          {
            oprot.writeI32(struct.returnColumns.size());
            for (String _iter171 : struct.returnColumns)
            {
              oprot.writeString(_iter171);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, knnQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.tbName = iprot.readString();
          struct.setTbNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list172 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.qv = new ArrayList<SPColumn>(_list172.size);
            for (int _i173 = 0; _i173 < _list172.size; ++_i173)
            {
              SPColumn _elem174;
              _elem174 = new SPColumn();
              _elem174.read(iprot);
              struct.qv.add(_elem174);
            }
          }
          struct.setQvIsSet(true);
        }
        if (incoming.get(2)) {
          struct.K = iprot.readI32();
          struct.setKIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list175 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.returnColumns = new ArrayList<String>(_list175.size);
            for (int _i176 = 0; _i176 < _list175.size; ++_i176)
            {
              String _elem177;
              _elem177 = iprot.readString();
              struct.returnColumns.add(_elem177);
            }
          }
          struct.setReturnColumnsIsSet(true);
        }
      }
    }

  }

  public static class knnQuery_result implements org.apache.thrift.TBase<knnQuery_result, knnQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<knnQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("knnQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new knnQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new knnQuery_resultTupleSchemeFactory());
    }

    public List<SPKVObject> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SPKVObject.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(knnQuery_result.class, metaDataMap);
    }

    public knnQuery_result() {
    }

    public knnQuery_result(
      List<SPKVObject> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public knnQuery_result(knnQuery_result other) {
      if (other.isSetSuccess()) {
        List<SPKVObject> __this__success = new ArrayList<SPKVObject>(other.success.size());
        for (SPKVObject other_element : other.success) {
          __this__success.add(new SPKVObject(other_element));
        }
        this.success = __this__success;
      }
    }

    public knnQuery_result deepCopy() {
      return new knnQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SPKVObject> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SPKVObject elem) {
      if (this.success == null) {
        this.success = new ArrayList<SPKVObject>();
      }
      this.success.add(elem);
    }

    public List<SPKVObject> getSuccess() {
      return this.success;
    }

    public knnQuery_result setSuccess(List<SPKVObject> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SPKVObject>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof knnQuery_result)
        return this.equals((knnQuery_result)that);
      return false;
    }

    public boolean equals(knnQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(knnQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("knnQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class knnQuery_resultStandardSchemeFactory implements SchemeFactory {
      public knnQuery_resultStandardScheme getScheme() {
        return new knnQuery_resultStandardScheme();
      }
    }

    private static class knnQuery_resultStandardScheme extends StandardScheme<knnQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, knnQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list178 = iprot.readListBegin();
                  struct.success = new ArrayList<SPKVObject>(_list178.size);
                  for (int _i179 = 0; _i179 < _list178.size; ++_i179)
                  {
                    SPKVObject _elem180;
                    _elem180 = new SPKVObject();
                    _elem180.read(iprot);
                    struct.success.add(_elem180);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, knnQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SPKVObject _iter181 : struct.success)
            {
              _iter181.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class knnQuery_resultTupleSchemeFactory implements SchemeFactory {
      public knnQuery_resultTupleScheme getScheme() {
        return new knnQuery_resultTupleScheme();
      }
    }

    private static class knnQuery_resultTupleScheme extends TupleScheme<knnQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, knnQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SPKVObject _iter182 : struct.success)
            {
              _iter182.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, knnQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list183 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SPKVObject>(_list183.size);
            for (int _i184 = 0; _i184 < _list183.size; ++_i184)
            {
              SPKVObject _elem185;
              _elem185 = new SPKVObject();
              _elem185.read(iprot);
              struct.success.add(_elem185);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
