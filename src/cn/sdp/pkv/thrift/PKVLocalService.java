/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.sdp.pkv.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PKVLocalService {

  public interface Iface {

    public int createIndexTable(IndexInfo info) throws org.apache.thrift.TException;

    public int insertObject(String tbName, SPKVObject obj, long timestamp, int masterIp) throws org.apache.thrift.TException;

    public int batchInsertObjects(Map<String,List<SPKVObject>> objs, long timestamp, int masterIp) throws org.apache.thrift.TException;

    public int pointQueryCount(String tbName, List<Integer> qv, int masterIp) throws org.apache.thrift.TException;

    public List<SPKVRow> pointQuery(String tbName, List<Integer> qv, int masterIp, List<Integer> retCol) throws org.apache.thrift.TException;

    public int rangeQueryCount(String tbName, List<Integer> ql, List<Integer> qu, int masterIp) throws org.apache.thrift.TException;

    public List<SPKVRow> rangeQuery(String tbName, List<Integer> ql, List<Integer> qu, int masterIp, List<Integer> retCol) throws org.apache.thrift.TException;

    public List<SPKVRow> peerKnnQuery(String tbName, List<Integer> qv, int K, int masterIp, List<Integer> retCol) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createIndexTable(IndexInfo info, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void insertObject(String tbName, SPKVObject obj, long timestamp, int masterIp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchInsertObjects(Map<String,List<SPKVObject>> objs, long timestamp, int masterIp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pointQueryCount(String tbName, List<Integer> qv, int masterIp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pointQuery(String tbName, List<Integer> qv, int masterIp, List<Integer> retCol, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rangeQueryCount(String tbName, List<Integer> ql, List<Integer> qu, int masterIp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rangeQuery(String tbName, List<Integer> ql, List<Integer> qu, int masterIp, List<Integer> retCol, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void peerKnnQuery(String tbName, List<Integer> qv, int K, int masterIp, List<Integer> retCol, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int createIndexTable(IndexInfo info) throws org.apache.thrift.TException
    {
      send_createIndexTable(info);
      return recv_createIndexTable();
    }

    public void send_createIndexTable(IndexInfo info) throws org.apache.thrift.TException
    {
      createIndexTable_args args = new createIndexTable_args();
      args.setInfo(info);
      sendBase("createIndexTable", args);
    }

    public int recv_createIndexTable() throws org.apache.thrift.TException
    {
      createIndexTable_result result = new createIndexTable_result();
      receiveBase(result, "createIndexTable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createIndexTable failed: unknown result");
    }

    public int insertObject(String tbName, SPKVObject obj, long timestamp, int masterIp) throws org.apache.thrift.TException
    {
      send_insertObject(tbName, obj, timestamp, masterIp);
      return recv_insertObject();
    }

    public void send_insertObject(String tbName, SPKVObject obj, long timestamp, int masterIp) throws org.apache.thrift.TException
    {
      insertObject_args args = new insertObject_args();
      args.setTbName(tbName);
      args.setObj(obj);
      args.setTimestamp(timestamp);
      args.setMasterIp(masterIp);
      sendBase("insertObject", args);
    }

    public int recv_insertObject() throws org.apache.thrift.TException
    {
      insertObject_result result = new insertObject_result();
      receiveBase(result, "insertObject");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertObject failed: unknown result");
    }

    public int batchInsertObjects(Map<String,List<SPKVObject>> objs, long timestamp, int masterIp) throws org.apache.thrift.TException
    {
      send_batchInsertObjects(objs, timestamp, masterIp);
      return recv_batchInsertObjects();
    }

    public void send_batchInsertObjects(Map<String,List<SPKVObject>> objs, long timestamp, int masterIp) throws org.apache.thrift.TException
    {
      batchInsertObjects_args args = new batchInsertObjects_args();
      args.setObjs(objs);
      args.setTimestamp(timestamp);
      args.setMasterIp(masterIp);
      sendBase("batchInsertObjects", args);
    }

    public int recv_batchInsertObjects() throws org.apache.thrift.TException
    {
      batchInsertObjects_result result = new batchInsertObjects_result();
      receiveBase(result, "batchInsertObjects");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchInsertObjects failed: unknown result");
    }

    public int pointQueryCount(String tbName, List<Integer> qv, int masterIp) throws org.apache.thrift.TException
    {
      send_pointQueryCount(tbName, qv, masterIp);
      return recv_pointQueryCount();
    }

    public void send_pointQueryCount(String tbName, List<Integer> qv, int masterIp) throws org.apache.thrift.TException
    {
      pointQueryCount_args args = new pointQueryCount_args();
      args.setTbName(tbName);
      args.setQv(qv);
      args.setMasterIp(masterIp);
      sendBase("pointQueryCount", args);
    }

    public int recv_pointQueryCount() throws org.apache.thrift.TException
    {
      pointQueryCount_result result = new pointQueryCount_result();
      receiveBase(result, "pointQueryCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pointQueryCount failed: unknown result");
    }

    public List<SPKVRow> pointQuery(String tbName, List<Integer> qv, int masterIp, List<Integer> retCol) throws org.apache.thrift.TException
    {
      send_pointQuery(tbName, qv, masterIp, retCol);
      return recv_pointQuery();
    }

    public void send_pointQuery(String tbName, List<Integer> qv, int masterIp, List<Integer> retCol) throws org.apache.thrift.TException
    {
      pointQuery_args args = new pointQuery_args();
      args.setTbName(tbName);
      args.setQv(qv);
      args.setMasterIp(masterIp);
      args.setRetCol(retCol);
      sendBase("pointQuery", args);
    }

    public List<SPKVRow> recv_pointQuery() throws org.apache.thrift.TException
    {
      pointQuery_result result = new pointQuery_result();
      receiveBase(result, "pointQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pointQuery failed: unknown result");
    }

    public int rangeQueryCount(String tbName, List<Integer> ql, List<Integer> qu, int masterIp) throws org.apache.thrift.TException
    {
      send_rangeQueryCount(tbName, ql, qu, masterIp);
      return recv_rangeQueryCount();
    }

    public void send_rangeQueryCount(String tbName, List<Integer> ql, List<Integer> qu, int masterIp) throws org.apache.thrift.TException
    {
      rangeQueryCount_args args = new rangeQueryCount_args();
      args.setTbName(tbName);
      args.setQl(ql);
      args.setQu(qu);
      args.setMasterIp(masterIp);
      sendBase("rangeQueryCount", args);
    }

    public int recv_rangeQueryCount() throws org.apache.thrift.TException
    {
      rangeQueryCount_result result = new rangeQueryCount_result();
      receiveBase(result, "rangeQueryCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rangeQueryCount failed: unknown result");
    }

    public List<SPKVRow> rangeQuery(String tbName, List<Integer> ql, List<Integer> qu, int masterIp, List<Integer> retCol) throws org.apache.thrift.TException
    {
      send_rangeQuery(tbName, ql, qu, masterIp, retCol);
      return recv_rangeQuery();
    }

    public void send_rangeQuery(String tbName, List<Integer> ql, List<Integer> qu, int masterIp, List<Integer> retCol) throws org.apache.thrift.TException
    {
      rangeQuery_args args = new rangeQuery_args();
      args.setTbName(tbName);
      args.setQl(ql);
      args.setQu(qu);
      args.setMasterIp(masterIp);
      args.setRetCol(retCol);
      sendBase("rangeQuery", args);
    }

    public List<SPKVRow> recv_rangeQuery() throws org.apache.thrift.TException
    {
      rangeQuery_result result = new rangeQuery_result();
      receiveBase(result, "rangeQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rangeQuery failed: unknown result");
    }

    public List<SPKVRow> peerKnnQuery(String tbName, List<Integer> qv, int K, int masterIp, List<Integer> retCol) throws org.apache.thrift.TException
    {
      send_peerKnnQuery(tbName, qv, K, masterIp, retCol);
      return recv_peerKnnQuery();
    }

    public void send_peerKnnQuery(String tbName, List<Integer> qv, int K, int masterIp, List<Integer> retCol) throws org.apache.thrift.TException
    {
      peerKnnQuery_args args = new peerKnnQuery_args();
      args.setTbName(tbName);
      args.setQv(qv);
      args.setK(K);
      args.setMasterIp(masterIp);
      args.setRetCol(retCol);
      sendBase("peerKnnQuery", args);
    }

    public List<SPKVRow> recv_peerKnnQuery() throws org.apache.thrift.TException
    {
      peerKnnQuery_result result = new peerKnnQuery_result();
      receiveBase(result, "peerKnnQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "peerKnnQuery failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createIndexTable(IndexInfo info, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createIndexTable_call method_call = new createIndexTable_call(info, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createIndexTable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private IndexInfo info;
      public createIndexTable_call(IndexInfo info, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.info = info;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createIndexTable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createIndexTable_args args = new createIndexTable_args();
        args.setInfo(info);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createIndexTable();
      }
    }

    public void insertObject(String tbName, SPKVObject obj, long timestamp, int masterIp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertObject_call method_call = new insertObject_call(tbName, obj, timestamp, masterIp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertObject_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tbName;
      private SPKVObject obj;
      private long timestamp;
      private int masterIp;
      public insertObject_call(String tbName, SPKVObject obj, long timestamp, int masterIp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tbName = tbName;
        this.obj = obj;
        this.timestamp = timestamp;
        this.masterIp = masterIp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertObject", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertObject_args args = new insertObject_args();
        args.setTbName(tbName);
        args.setObj(obj);
        args.setTimestamp(timestamp);
        args.setMasterIp(masterIp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertObject();
      }
    }

    public void batchInsertObjects(Map<String,List<SPKVObject>> objs, long timestamp, int masterIp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchInsertObjects_call method_call = new batchInsertObjects_call(objs, timestamp, masterIp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchInsertObjects_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,List<SPKVObject>> objs;
      private long timestamp;
      private int masterIp;
      public batchInsertObjects_call(Map<String,List<SPKVObject>> objs, long timestamp, int masterIp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.objs = objs;
        this.timestamp = timestamp;
        this.masterIp = masterIp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchInsertObjects", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchInsertObjects_args args = new batchInsertObjects_args();
        args.setObjs(objs);
        args.setTimestamp(timestamp);
        args.setMasterIp(masterIp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchInsertObjects();
      }
    }

    public void pointQueryCount(String tbName, List<Integer> qv, int masterIp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pointQueryCount_call method_call = new pointQueryCount_call(tbName, qv, masterIp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pointQueryCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tbName;
      private List<Integer> qv;
      private int masterIp;
      public pointQueryCount_call(String tbName, List<Integer> qv, int masterIp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tbName = tbName;
        this.qv = qv;
        this.masterIp = masterIp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pointQueryCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pointQueryCount_args args = new pointQueryCount_args();
        args.setTbName(tbName);
        args.setQv(qv);
        args.setMasterIp(masterIp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pointQueryCount();
      }
    }

    public void pointQuery(String tbName, List<Integer> qv, int masterIp, List<Integer> retCol, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pointQuery_call method_call = new pointQuery_call(tbName, qv, masterIp, retCol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pointQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tbName;
      private List<Integer> qv;
      private int masterIp;
      private List<Integer> retCol;
      public pointQuery_call(String tbName, List<Integer> qv, int masterIp, List<Integer> retCol, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tbName = tbName;
        this.qv = qv;
        this.masterIp = masterIp;
        this.retCol = retCol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pointQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pointQuery_args args = new pointQuery_args();
        args.setTbName(tbName);
        args.setQv(qv);
        args.setMasterIp(masterIp);
        args.setRetCol(retCol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SPKVRow> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pointQuery();
      }
    }

    public void rangeQueryCount(String tbName, List<Integer> ql, List<Integer> qu, int masterIp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rangeQueryCount_call method_call = new rangeQueryCount_call(tbName, ql, qu, masterIp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rangeQueryCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tbName;
      private List<Integer> ql;
      private List<Integer> qu;
      private int masterIp;
      public rangeQueryCount_call(String tbName, List<Integer> ql, List<Integer> qu, int masterIp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tbName = tbName;
        this.ql = ql;
        this.qu = qu;
        this.masterIp = masterIp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rangeQueryCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rangeQueryCount_args args = new rangeQueryCount_args();
        args.setTbName(tbName);
        args.setQl(ql);
        args.setQu(qu);
        args.setMasterIp(masterIp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rangeQueryCount();
      }
    }

    public void rangeQuery(String tbName, List<Integer> ql, List<Integer> qu, int masterIp, List<Integer> retCol, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rangeQuery_call method_call = new rangeQuery_call(tbName, ql, qu, masterIp, retCol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rangeQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tbName;
      private List<Integer> ql;
      private List<Integer> qu;
      private int masterIp;
      private List<Integer> retCol;
      public rangeQuery_call(String tbName, List<Integer> ql, List<Integer> qu, int masterIp, List<Integer> retCol, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tbName = tbName;
        this.ql = ql;
        this.qu = qu;
        this.masterIp = masterIp;
        this.retCol = retCol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rangeQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rangeQuery_args args = new rangeQuery_args();
        args.setTbName(tbName);
        args.setQl(ql);
        args.setQu(qu);
        args.setMasterIp(masterIp);
        args.setRetCol(retCol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SPKVRow> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rangeQuery();
      }
    }

    public void peerKnnQuery(String tbName, List<Integer> qv, int K, int masterIp, List<Integer> retCol, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      peerKnnQuery_call method_call = new peerKnnQuery_call(tbName, qv, K, masterIp, retCol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class peerKnnQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tbName;
      private List<Integer> qv;
      private int K;
      private int masterIp;
      private List<Integer> retCol;
      public peerKnnQuery_call(String tbName, List<Integer> qv, int K, int masterIp, List<Integer> retCol, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tbName = tbName;
        this.qv = qv;
        this.K = K;
        this.masterIp = masterIp;
        this.retCol = retCol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("peerKnnQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        peerKnnQuery_args args = new peerKnnQuery_args();
        args.setTbName(tbName);
        args.setQv(qv);
        args.setK(K);
        args.setMasterIp(masterIp);
        args.setRetCol(retCol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SPKVRow> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_peerKnnQuery();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createIndexTable", new createIndexTable());
      processMap.put("insertObject", new insertObject());
      processMap.put("batchInsertObjects", new batchInsertObjects());
      processMap.put("pointQueryCount", new pointQueryCount());
      processMap.put("pointQuery", new pointQuery());
      processMap.put("rangeQueryCount", new rangeQueryCount());
      processMap.put("rangeQuery", new rangeQuery());
      processMap.put("peerKnnQuery", new peerKnnQuery());
      return processMap;
    }

    public static class createIndexTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createIndexTable_args> {
      public createIndexTable() {
        super("createIndexTable");
      }

      public createIndexTable_args getEmptyArgsInstance() {
        return new createIndexTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createIndexTable_result getResult(I iface, createIndexTable_args args) throws org.apache.thrift.TException {
        createIndexTable_result result = new createIndexTable_result();
        result.success = iface.createIndexTable(args.info);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class insertObject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertObject_args> {
      public insertObject() {
        super("insertObject");
      }

      public insertObject_args getEmptyArgsInstance() {
        return new insertObject_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insertObject_result getResult(I iface, insertObject_args args) throws org.apache.thrift.TException {
        insertObject_result result = new insertObject_result();
        result.success = iface.insertObject(args.tbName, args.obj, args.timestamp, args.masterIp);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class batchInsertObjects<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchInsertObjects_args> {
      public batchInsertObjects() {
        super("batchInsertObjects");
      }

      public batchInsertObjects_args getEmptyArgsInstance() {
        return new batchInsertObjects_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchInsertObjects_result getResult(I iface, batchInsertObjects_args args) throws org.apache.thrift.TException {
        batchInsertObjects_result result = new batchInsertObjects_result();
        result.success = iface.batchInsertObjects(args.objs, args.timestamp, args.masterIp);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class pointQueryCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pointQueryCount_args> {
      public pointQueryCount() {
        super("pointQueryCount");
      }

      public pointQueryCount_args getEmptyArgsInstance() {
        return new pointQueryCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pointQueryCount_result getResult(I iface, pointQueryCount_args args) throws org.apache.thrift.TException {
        pointQueryCount_result result = new pointQueryCount_result();
        result.success = iface.pointQueryCount(args.tbName, args.qv, args.masterIp);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class pointQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pointQuery_args> {
      public pointQuery() {
        super("pointQuery");
      }

      public pointQuery_args getEmptyArgsInstance() {
        return new pointQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pointQuery_result getResult(I iface, pointQuery_args args) throws org.apache.thrift.TException {
        pointQuery_result result = new pointQuery_result();
        result.success = iface.pointQuery(args.tbName, args.qv, args.masterIp, args.retCol);
        return result;
      }
    }

    public static class rangeQueryCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rangeQueryCount_args> {
      public rangeQueryCount() {
        super("rangeQueryCount");
      }

      public rangeQueryCount_args getEmptyArgsInstance() {
        return new rangeQueryCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rangeQueryCount_result getResult(I iface, rangeQueryCount_args args) throws org.apache.thrift.TException {
        rangeQueryCount_result result = new rangeQueryCount_result();
        result.success = iface.rangeQueryCount(args.tbName, args.ql, args.qu, args.masterIp);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class rangeQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rangeQuery_args> {
      public rangeQuery() {
        super("rangeQuery");
      }

      public rangeQuery_args getEmptyArgsInstance() {
        return new rangeQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rangeQuery_result getResult(I iface, rangeQuery_args args) throws org.apache.thrift.TException {
        rangeQuery_result result = new rangeQuery_result();
        result.success = iface.rangeQuery(args.tbName, args.ql, args.qu, args.masterIp, args.retCol);
        return result;
      }
    }

    public static class peerKnnQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, peerKnnQuery_args> {
      public peerKnnQuery() {
        super("peerKnnQuery");
      }

      public peerKnnQuery_args getEmptyArgsInstance() {
        return new peerKnnQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public peerKnnQuery_result getResult(I iface, peerKnnQuery_args args) throws org.apache.thrift.TException {
        peerKnnQuery_result result = new peerKnnQuery_result();
        result.success = iface.peerKnnQuery(args.tbName, args.qv, args.K, args.masterIp, args.retCol);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createIndexTable", new createIndexTable());
      processMap.put("insertObject", new insertObject());
      processMap.put("batchInsertObjects", new batchInsertObjects());
      processMap.put("pointQueryCount", new pointQueryCount());
      processMap.put("pointQuery", new pointQuery());
      processMap.put("rangeQueryCount", new rangeQueryCount());
      processMap.put("rangeQuery", new rangeQuery());
      processMap.put("peerKnnQuery", new peerKnnQuery());
      return processMap;
    }

    public static class createIndexTable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createIndexTable_args, Integer> {
      public createIndexTable() {
        super("createIndexTable");
      }

      public createIndexTable_args getEmptyArgsInstance() {
        return new createIndexTable_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            createIndexTable_result result = new createIndexTable_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createIndexTable_result result = new createIndexTable_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createIndexTable_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.createIndexTable(args.info,resultHandler);
      }
    }

    public static class insertObject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertObject_args, Integer> {
      public insertObject() {
        super("insertObject");
      }

      public insertObject_args getEmptyArgsInstance() {
        return new insertObject_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            insertObject_result result = new insertObject_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insertObject_result result = new insertObject_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertObject_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.insertObject(args.tbName, args.obj, args.timestamp, args.masterIp,resultHandler);
      }
    }

    public static class batchInsertObjects<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchInsertObjects_args, Integer> {
      public batchInsertObjects() {
        super("batchInsertObjects");
      }

      public batchInsertObjects_args getEmptyArgsInstance() {
        return new batchInsertObjects_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            batchInsertObjects_result result = new batchInsertObjects_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchInsertObjects_result result = new batchInsertObjects_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchInsertObjects_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.batchInsertObjects(args.objs, args.timestamp, args.masterIp,resultHandler);
      }
    }

    public static class pointQueryCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pointQueryCount_args, Integer> {
      public pointQueryCount() {
        super("pointQueryCount");
      }

      public pointQueryCount_args getEmptyArgsInstance() {
        return new pointQueryCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            pointQueryCount_result result = new pointQueryCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pointQueryCount_result result = new pointQueryCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pointQueryCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.pointQueryCount(args.tbName, args.qv, args.masterIp,resultHandler);
      }
    }

    public static class pointQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pointQuery_args, List<SPKVRow>> {
      public pointQuery() {
        super("pointQuery");
      }

      public pointQuery_args getEmptyArgsInstance() {
        return new pointQuery_args();
      }

      public AsyncMethodCallback<List<SPKVRow>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SPKVRow>>() { 
          public void onComplete(List<SPKVRow> o) {
            pointQuery_result result = new pointQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pointQuery_result result = new pointQuery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pointQuery_args args, org.apache.thrift.async.AsyncMethodCallback<List<SPKVRow>> resultHandler) throws TException {
        iface.pointQuery(args.tbName, args.qv, args.masterIp, args.retCol,resultHandler);
      }
    }

    public static class rangeQueryCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rangeQueryCount_args, Integer> {
      public rangeQueryCount() {
        super("rangeQueryCount");
      }

      public rangeQueryCount_args getEmptyArgsInstance() {
        return new rangeQueryCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            rangeQueryCount_result result = new rangeQueryCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rangeQueryCount_result result = new rangeQueryCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rangeQueryCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.rangeQueryCount(args.tbName, args.ql, args.qu, args.masterIp,resultHandler);
      }
    }

    public static class rangeQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rangeQuery_args, List<SPKVRow>> {
      public rangeQuery() {
        super("rangeQuery");
      }

      public rangeQuery_args getEmptyArgsInstance() {
        return new rangeQuery_args();
      }

      public AsyncMethodCallback<List<SPKVRow>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SPKVRow>>() { 
          public void onComplete(List<SPKVRow> o) {
            rangeQuery_result result = new rangeQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rangeQuery_result result = new rangeQuery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rangeQuery_args args, org.apache.thrift.async.AsyncMethodCallback<List<SPKVRow>> resultHandler) throws TException {
        iface.rangeQuery(args.tbName, args.ql, args.qu, args.masterIp, args.retCol,resultHandler);
      }
    }

    public static class peerKnnQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, peerKnnQuery_args, List<SPKVRow>> {
      public peerKnnQuery() {
        super("peerKnnQuery");
      }

      public peerKnnQuery_args getEmptyArgsInstance() {
        return new peerKnnQuery_args();
      }

      public AsyncMethodCallback<List<SPKVRow>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SPKVRow>>() { 
          public void onComplete(List<SPKVRow> o) {
            peerKnnQuery_result result = new peerKnnQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            peerKnnQuery_result result = new peerKnnQuery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, peerKnnQuery_args args, org.apache.thrift.async.AsyncMethodCallback<List<SPKVRow>> resultHandler) throws TException {
        iface.peerKnnQuery(args.tbName, args.qv, args.K, args.masterIp, args.retCol,resultHandler);
      }
    }

  }

  public static class createIndexTable_args implements org.apache.thrift.TBase<createIndexTable_args, createIndexTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<createIndexTable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createIndexTable_args");

    private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createIndexTable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createIndexTable_argsTupleSchemeFactory());
    }

    public IndexInfo info; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INFO((short)1, "info");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INFO
            return INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IndexInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createIndexTable_args.class, metaDataMap);
    }

    public createIndexTable_args() {
    }

    public createIndexTable_args(
      IndexInfo info)
    {
      this();
      this.info = info;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createIndexTable_args(createIndexTable_args other) {
      if (other.isSetInfo()) {
        this.info = new IndexInfo(other.info);
      }
    }

    public createIndexTable_args deepCopy() {
      return new createIndexTable_args(this);
    }

    @Override
    public void clear() {
      this.info = null;
    }

    public IndexInfo getInfo() {
      return this.info;
    }

    public createIndexTable_args setInfo(IndexInfo info) {
      this.info = info;
      return this;
    }

    public void unsetInfo() {
      this.info = null;
    }

    /** Returns true if field info is set (has been assigned a value) and false otherwise */
    public boolean isSetInfo() {
      return this.info != null;
    }

    public void setInfoIsSet(boolean value) {
      if (!value) {
        this.info = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INFO:
        if (value == null) {
          unsetInfo();
        } else {
          setInfo((IndexInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INFO:
        return getInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INFO:
        return isSetInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createIndexTable_args)
        return this.equals((createIndexTable_args)that);
      return false;
    }

    public boolean equals(createIndexTable_args that) {
      if (that == null)
        return false;

      boolean this_present_info = true && this.isSetInfo();
      boolean that_present_info = true && that.isSetInfo();
      if (this_present_info || that_present_info) {
        if (!(this_present_info && that_present_info))
          return false;
        if (!this.info.equals(that.info))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createIndexTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInfo()).compareTo(other.isSetInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, other.info);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createIndexTable_args(");
      boolean first = true;

      sb.append("info:");
      if (this.info == null) {
        sb.append("null");
      } else {
        sb.append(this.info);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (info != null) {
        info.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createIndexTable_argsStandardSchemeFactory implements SchemeFactory {
      public createIndexTable_argsStandardScheme getScheme() {
        return new createIndexTable_argsStandardScheme();
      }
    }

    private static class createIndexTable_argsStandardScheme extends StandardScheme<createIndexTable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createIndexTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.info = new IndexInfo();
                struct.info.read(iprot);
                struct.setInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createIndexTable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.info != null) {
          oprot.writeFieldBegin(INFO_FIELD_DESC);
          struct.info.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createIndexTable_argsTupleSchemeFactory implements SchemeFactory {
      public createIndexTable_argsTupleScheme getScheme() {
        return new createIndexTable_argsTupleScheme();
      }
    }

    private static class createIndexTable_argsTupleScheme extends TupleScheme<createIndexTable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createIndexTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInfo()) {
          struct.info.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createIndexTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.info = new IndexInfo();
          struct.info.read(iprot);
          struct.setInfoIsSet(true);
        }
      }
    }

  }

  public static class createIndexTable_result implements org.apache.thrift.TBase<createIndexTable_result, createIndexTable_result._Fields>, java.io.Serializable, Cloneable, Comparable<createIndexTable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createIndexTable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createIndexTable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createIndexTable_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createIndexTable_result.class, metaDataMap);
    }

    public createIndexTable_result() {
    }

    public createIndexTable_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createIndexTable_result(createIndexTable_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createIndexTable_result deepCopy() {
      return new createIndexTable_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public createIndexTable_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createIndexTable_result)
        return this.equals((createIndexTable_result)that);
      return false;
    }

    public boolean equals(createIndexTable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createIndexTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createIndexTable_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createIndexTable_resultStandardSchemeFactory implements SchemeFactory {
      public createIndexTable_resultStandardScheme getScheme() {
        return new createIndexTable_resultStandardScheme();
      }
    }

    private static class createIndexTable_resultStandardScheme extends StandardScheme<createIndexTable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createIndexTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createIndexTable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createIndexTable_resultTupleSchemeFactory implements SchemeFactory {
      public createIndexTable_resultTupleScheme getScheme() {
        return new createIndexTable_resultTupleScheme();
      }
    }

    private static class createIndexTable_resultTupleScheme extends TupleScheme<createIndexTable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createIndexTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createIndexTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class insertObject_args implements org.apache.thrift.TBase<insertObject_args, insertObject_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertObject_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertObject_args");

    private static final org.apache.thrift.protocol.TField TB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tbName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("obj", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField MASTER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("masterIp", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertObject_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertObject_argsTupleSchemeFactory());
    }

    public String tbName; // required
    public SPKVObject obj; // required
    public long timestamp; // required
    public int masterIp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TB_NAME((short)1, "tbName"),
      OBJ((short)2, "obj"),
      TIMESTAMP((short)3, "timestamp"),
      MASTER_IP((short)4, "masterIp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TB_NAME
            return TB_NAME;
          case 2: // OBJ
            return OBJ;
          case 3: // TIMESTAMP
            return TIMESTAMP;
          case 4: // MASTER_IP
            return MASTER_IP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMESTAMP_ISSET_ID = 0;
    private static final int __MASTERIP_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TB_NAME, new org.apache.thrift.meta_data.FieldMetaData("tbName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OBJ, new org.apache.thrift.meta_data.FieldMetaData("obj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SPKVObject.class)));
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MASTER_IP, new org.apache.thrift.meta_data.FieldMetaData("masterIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertObject_args.class, metaDataMap);
    }

    public insertObject_args() {
    }

    public insertObject_args(
      String tbName,
      SPKVObject obj,
      long timestamp,
      int masterIp)
    {
      this();
      this.tbName = tbName;
      this.obj = obj;
      this.timestamp = timestamp;
      setTimestampIsSet(true);
      this.masterIp = masterIp;
      setMasterIpIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertObject_args(insertObject_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTbName()) {
        this.tbName = other.tbName;
      }
      if (other.isSetObj()) {
        this.obj = new SPKVObject(other.obj);
      }
      this.timestamp = other.timestamp;
      this.masterIp = other.masterIp;
    }

    public insertObject_args deepCopy() {
      return new insertObject_args(this);
    }

    @Override
    public void clear() {
      this.tbName = null;
      this.obj = null;
      setTimestampIsSet(false);
      this.timestamp = 0;
      setMasterIpIsSet(false);
      this.masterIp = 0;
    }

    public String getTbName() {
      return this.tbName;
    }

    public insertObject_args setTbName(String tbName) {
      this.tbName = tbName;
      return this;
    }

    public void unsetTbName() {
      this.tbName = null;
    }

    /** Returns true if field tbName is set (has been assigned a value) and false otherwise */
    public boolean isSetTbName() {
      return this.tbName != null;
    }

    public void setTbNameIsSet(boolean value) {
      if (!value) {
        this.tbName = null;
      }
    }

    public SPKVObject getObj() {
      return this.obj;
    }

    public insertObject_args setObj(SPKVObject obj) {
      this.obj = obj;
      return this;
    }

    public void unsetObj() {
      this.obj = null;
    }

    /** Returns true if field obj is set (has been assigned a value) and false otherwise */
    public boolean isSetObj() {
      return this.obj != null;
    }

    public void setObjIsSet(boolean value) {
      if (!value) {
        this.obj = null;
      }
    }

    public long getTimestamp() {
      return this.timestamp;
    }

    public insertObject_args setTimestamp(long timestamp) {
      this.timestamp = timestamp;
      setTimestampIsSet(true);
      return this;
    }

    public void unsetTimestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public int getMasterIp() {
      return this.masterIp;
    }

    public insertObject_args setMasterIp(int masterIp) {
      this.masterIp = masterIp;
      setMasterIpIsSet(true);
      return this;
    }

    public void unsetMasterIp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MASTERIP_ISSET_ID);
    }

    /** Returns true if field masterIp is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterIp() {
      return EncodingUtils.testBit(__isset_bitfield, __MASTERIP_ISSET_ID);
    }

    public void setMasterIpIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MASTERIP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TB_NAME:
        if (value == null) {
          unsetTbName();
        } else {
          setTbName((String)value);
        }
        break;

      case OBJ:
        if (value == null) {
          unsetObj();
        } else {
          setObj((SPKVObject)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((Long)value);
        }
        break;

      case MASTER_IP:
        if (value == null) {
          unsetMasterIp();
        } else {
          setMasterIp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TB_NAME:
        return getTbName();

      case OBJ:
        return getObj();

      case TIMESTAMP:
        return Long.valueOf(getTimestamp());

      case MASTER_IP:
        return Integer.valueOf(getMasterIp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TB_NAME:
        return isSetTbName();
      case OBJ:
        return isSetObj();
      case TIMESTAMP:
        return isSetTimestamp();
      case MASTER_IP:
        return isSetMasterIp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertObject_args)
        return this.equals((insertObject_args)that);
      return false;
    }

    public boolean equals(insertObject_args that) {
      if (that == null)
        return false;

      boolean this_present_tbName = true && this.isSetTbName();
      boolean that_present_tbName = true && that.isSetTbName();
      if (this_present_tbName || that_present_tbName) {
        if (!(this_present_tbName && that_present_tbName))
          return false;
        if (!this.tbName.equals(that.tbName))
          return false;
      }

      boolean this_present_obj = true && this.isSetObj();
      boolean that_present_obj = true && that.isSetObj();
      if (this_present_obj || that_present_obj) {
        if (!(this_present_obj && that_present_obj))
          return false;
        if (!this.obj.equals(that.obj))
          return false;
      }

      boolean this_present_timestamp = true;
      boolean that_present_timestamp = true;
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (this.timestamp != that.timestamp)
          return false;
      }

      boolean this_present_masterIp = true;
      boolean that_present_masterIp = true;
      if (this_present_masterIp || that_present_masterIp) {
        if (!(this_present_masterIp && that_present_masterIp))
          return false;
        if (this.masterIp != that.masterIp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(insertObject_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTbName()).compareTo(other.isSetTbName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTbName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbName, other.tbName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetObj()).compareTo(other.isSetObj());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObj()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obj, other.obj);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMasterIp()).compareTo(other.isSetMasterIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterIp, other.masterIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertObject_args(");
      boolean first = true;

      sb.append("tbName:");
      if (this.tbName == null) {
        sb.append("null");
      } else {
        sb.append(this.tbName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("obj:");
      if (this.obj == null) {
        sb.append("null");
      } else {
        sb.append(this.obj);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("masterIp:");
      sb.append(this.masterIp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (obj != null) {
        obj.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertObject_argsStandardSchemeFactory implements SchemeFactory {
      public insertObject_argsStandardScheme getScheme() {
        return new insertObject_argsStandardScheme();
      }
    }

    private static class insertObject_argsStandardScheme extends StandardScheme<insertObject_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertObject_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TB_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tbName = iprot.readString();
                struct.setTbNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OBJ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.obj = new SPKVObject();
                struct.obj.read(iprot);
                struct.setObjIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MASTER_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.masterIp = iprot.readI32();
                struct.setMasterIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertObject_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tbName != null) {
          oprot.writeFieldBegin(TB_NAME_FIELD_DESC);
          oprot.writeString(struct.tbName);
          oprot.writeFieldEnd();
        }
        if (struct.obj != null) {
          oprot.writeFieldBegin(OBJ_FIELD_DESC);
          struct.obj.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MASTER_IP_FIELD_DESC);
        oprot.writeI32(struct.masterIp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertObject_argsTupleSchemeFactory implements SchemeFactory {
      public insertObject_argsTupleScheme getScheme() {
        return new insertObject_argsTupleScheme();
      }
    }

    private static class insertObject_argsTupleScheme extends TupleScheme<insertObject_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertObject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTbName()) {
          optionals.set(0);
        }
        if (struct.isSetObj()) {
          optionals.set(1);
        }
        if (struct.isSetTimestamp()) {
          optionals.set(2);
        }
        if (struct.isSetMasterIp()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTbName()) {
          oprot.writeString(struct.tbName);
        }
        if (struct.isSetObj()) {
          struct.obj.write(oprot);
        }
        if (struct.isSetTimestamp()) {
          oprot.writeI64(struct.timestamp);
        }
        if (struct.isSetMasterIp()) {
          oprot.writeI32(struct.masterIp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertObject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.tbName = iprot.readString();
          struct.setTbNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.obj = new SPKVObject();
          struct.obj.read(iprot);
          struct.setObjIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timestamp = iprot.readI64();
          struct.setTimestampIsSet(true);
        }
        if (incoming.get(3)) {
          struct.masterIp = iprot.readI32();
          struct.setMasterIpIsSet(true);
        }
      }
    }

  }

  public static class insertObject_result implements org.apache.thrift.TBase<insertObject_result, insertObject_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertObject_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertObject_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertObject_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertObject_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertObject_result.class, metaDataMap);
    }

    public insertObject_result() {
    }

    public insertObject_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertObject_result(insertObject_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public insertObject_result deepCopy() {
      return new insertObject_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public insertObject_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertObject_result)
        return this.equals((insertObject_result)that);
      return false;
    }

    public boolean equals(insertObject_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(insertObject_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertObject_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertObject_resultStandardSchemeFactory implements SchemeFactory {
      public insertObject_resultStandardScheme getScheme() {
        return new insertObject_resultStandardScheme();
      }
    }

    private static class insertObject_resultStandardScheme extends StandardScheme<insertObject_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertObject_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertObject_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertObject_resultTupleSchemeFactory implements SchemeFactory {
      public insertObject_resultTupleScheme getScheme() {
        return new insertObject_resultTupleScheme();
      }
    }

    private static class insertObject_resultTupleScheme extends TupleScheme<insertObject_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertObject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertObject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class batchInsertObjects_args implements org.apache.thrift.TBase<batchInsertObjects_args, batchInsertObjects_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchInsertObjects_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchInsertObjects_args");

    private static final org.apache.thrift.protocol.TField OBJS_FIELD_DESC = new org.apache.thrift.protocol.TField("objs", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField MASTER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("masterIp", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchInsertObjects_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchInsertObjects_argsTupleSchemeFactory());
    }

    public Map<String,List<SPKVObject>> objs; // required
    public long timestamp; // required
    public int masterIp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJS((short)1, "objs"),
      TIMESTAMP((short)2, "timestamp"),
      MASTER_IP((short)3, "masterIp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJS
            return OBJS;
          case 2: // TIMESTAMP
            return TIMESTAMP;
          case 3: // MASTER_IP
            return MASTER_IP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMESTAMP_ISSET_ID = 0;
    private static final int __MASTERIP_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJS, new org.apache.thrift.meta_data.FieldMetaData("objs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SPKVObject.class)))));
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MASTER_IP, new org.apache.thrift.meta_data.FieldMetaData("masterIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchInsertObjects_args.class, metaDataMap);
    }

    public batchInsertObjects_args() {
    }

    public batchInsertObjects_args(
      Map<String,List<SPKVObject>> objs,
      long timestamp,
      int masterIp)
    {
      this();
      this.objs = objs;
      this.timestamp = timestamp;
      setTimestampIsSet(true);
      this.masterIp = masterIp;
      setMasterIpIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchInsertObjects_args(batchInsertObjects_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetObjs()) {
        Map<String,List<SPKVObject>> __this__objs = new HashMap<String,List<SPKVObject>>(other.objs.size());
        for (Map.Entry<String, List<SPKVObject>> other_element : other.objs.entrySet()) {

          String other_element_key = other_element.getKey();
          List<SPKVObject> other_element_value = other_element.getValue();

          String __this__objs_copy_key = other_element_key;

          List<SPKVObject> __this__objs_copy_value = new ArrayList<SPKVObject>(other_element_value.size());
          for (SPKVObject other_element_value_element : other_element_value) {
            __this__objs_copy_value.add(new SPKVObject(other_element_value_element));
          }

          __this__objs.put(__this__objs_copy_key, __this__objs_copy_value);
        }
        this.objs = __this__objs;
      }
      this.timestamp = other.timestamp;
      this.masterIp = other.masterIp;
    }

    public batchInsertObjects_args deepCopy() {
      return new batchInsertObjects_args(this);
    }

    @Override
    public void clear() {
      this.objs = null;
      setTimestampIsSet(false);
      this.timestamp = 0;
      setMasterIpIsSet(false);
      this.masterIp = 0;
    }

    public int getObjsSize() {
      return (this.objs == null) ? 0 : this.objs.size();
    }

    public void putToObjs(String key, List<SPKVObject> val) {
      if (this.objs == null) {
        this.objs = new HashMap<String,List<SPKVObject>>();
      }
      this.objs.put(key, val);
    }

    public Map<String,List<SPKVObject>> getObjs() {
      return this.objs;
    }

    public batchInsertObjects_args setObjs(Map<String,List<SPKVObject>> objs) {
      this.objs = objs;
      return this;
    }

    public void unsetObjs() {
      this.objs = null;
    }

    /** Returns true if field objs is set (has been assigned a value) and false otherwise */
    public boolean isSetObjs() {
      return this.objs != null;
    }

    public void setObjsIsSet(boolean value) {
      if (!value) {
        this.objs = null;
      }
    }

    public long getTimestamp() {
      return this.timestamp;
    }

    public batchInsertObjects_args setTimestamp(long timestamp) {
      this.timestamp = timestamp;
      setTimestampIsSet(true);
      return this;
    }

    public void unsetTimestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public int getMasterIp() {
      return this.masterIp;
    }

    public batchInsertObjects_args setMasterIp(int masterIp) {
      this.masterIp = masterIp;
      setMasterIpIsSet(true);
      return this;
    }

    public void unsetMasterIp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MASTERIP_ISSET_ID);
    }

    /** Returns true if field masterIp is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterIp() {
      return EncodingUtils.testBit(__isset_bitfield, __MASTERIP_ISSET_ID);
    }

    public void setMasterIpIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MASTERIP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJS:
        if (value == null) {
          unsetObjs();
        } else {
          setObjs((Map<String,List<SPKVObject>>)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((Long)value);
        }
        break;

      case MASTER_IP:
        if (value == null) {
          unsetMasterIp();
        } else {
          setMasterIp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJS:
        return getObjs();

      case TIMESTAMP:
        return Long.valueOf(getTimestamp());

      case MASTER_IP:
        return Integer.valueOf(getMasterIp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJS:
        return isSetObjs();
      case TIMESTAMP:
        return isSetTimestamp();
      case MASTER_IP:
        return isSetMasterIp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchInsertObjects_args)
        return this.equals((batchInsertObjects_args)that);
      return false;
    }

    public boolean equals(batchInsertObjects_args that) {
      if (that == null)
        return false;

      boolean this_present_objs = true && this.isSetObjs();
      boolean that_present_objs = true && that.isSetObjs();
      if (this_present_objs || that_present_objs) {
        if (!(this_present_objs && that_present_objs))
          return false;
        if (!this.objs.equals(that.objs))
          return false;
      }

      boolean this_present_timestamp = true;
      boolean that_present_timestamp = true;
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (this.timestamp != that.timestamp)
          return false;
      }

      boolean this_present_masterIp = true;
      boolean that_present_masterIp = true;
      if (this_present_masterIp || that_present_masterIp) {
        if (!(this_present_masterIp && that_present_masterIp))
          return false;
        if (this.masterIp != that.masterIp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchInsertObjects_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObjs()).compareTo(other.isSetObjs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObjs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objs, other.objs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMasterIp()).compareTo(other.isSetMasterIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterIp, other.masterIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchInsertObjects_args(");
      boolean first = true;

      sb.append("objs:");
      if (this.objs == null) {
        sb.append("null");
      } else {
        sb.append(this.objs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("masterIp:");
      sb.append(this.masterIp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchInsertObjects_argsStandardSchemeFactory implements SchemeFactory {
      public batchInsertObjects_argsStandardScheme getScheme() {
        return new batchInsertObjects_argsStandardScheme();
      }
    }

    private static class batchInsertObjects_argsStandardScheme extends StandardScheme<batchInsertObjects_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchInsertObjects_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map204 = iprot.readMapBegin();
                  struct.objs = new HashMap<String,List<SPKVObject>>(2*_map204.size);
                  for (int _i205 = 0; _i205 < _map204.size; ++_i205)
                  {
                    String _key206;
                    List<SPKVObject> _val207;
                    _key206 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                      _val207 = new ArrayList<SPKVObject>(_list208.size);
                      for (int _i209 = 0; _i209 < _list208.size; ++_i209)
                      {
                        SPKVObject _elem210;
                        _elem210 = new SPKVObject();
                        _elem210.read(iprot);
                        _val207.add(_elem210);
                      }
                      iprot.readListEnd();
                    }
                    struct.objs.put(_key206, _val207);
                  }
                  iprot.readMapEnd();
                }
                struct.setObjsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MASTER_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.masterIp = iprot.readI32();
                struct.setMasterIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchInsertObjects_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.objs != null) {
          oprot.writeFieldBegin(OBJS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.objs.size()));
            for (Map.Entry<String, List<SPKVObject>> _iter211 : struct.objs.entrySet())
            {
              oprot.writeString(_iter211.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter211.getValue().size()));
                for (SPKVObject _iter212 : _iter211.getValue())
                {
                  _iter212.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MASTER_IP_FIELD_DESC);
        oprot.writeI32(struct.masterIp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchInsertObjects_argsTupleSchemeFactory implements SchemeFactory {
      public batchInsertObjects_argsTupleScheme getScheme() {
        return new batchInsertObjects_argsTupleScheme();
      }
    }

    private static class batchInsertObjects_argsTupleScheme extends TupleScheme<batchInsertObjects_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchInsertObjects_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObjs()) {
          optionals.set(0);
        }
        if (struct.isSetTimestamp()) {
          optionals.set(1);
        }
        if (struct.isSetMasterIp()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetObjs()) {
          {
            oprot.writeI32(struct.objs.size());
            for (Map.Entry<String, List<SPKVObject>> _iter213 : struct.objs.entrySet())
            {
              oprot.writeString(_iter213.getKey());
              {
                oprot.writeI32(_iter213.getValue().size());
                for (SPKVObject _iter214 : _iter213.getValue())
                {
                  _iter214.write(oprot);
                }
              }
            }
          }
        }
        if (struct.isSetTimestamp()) {
          oprot.writeI64(struct.timestamp);
        }
        if (struct.isSetMasterIp()) {
          oprot.writeI32(struct.masterIp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchInsertObjects_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map215 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.objs = new HashMap<String,List<SPKVObject>>(2*_map215.size);
            for (int _i216 = 0; _i216 < _map215.size; ++_i216)
            {
              String _key217;
              List<SPKVObject> _val218;
              _key217 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list219 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _val218 = new ArrayList<SPKVObject>(_list219.size);
                for (int _i220 = 0; _i220 < _list219.size; ++_i220)
                {
                  SPKVObject _elem221;
                  _elem221 = new SPKVObject();
                  _elem221.read(iprot);
                  _val218.add(_elem221);
                }
              }
              struct.objs.put(_key217, _val218);
            }
          }
          struct.setObjsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timestamp = iprot.readI64();
          struct.setTimestampIsSet(true);
        }
        if (incoming.get(2)) {
          struct.masterIp = iprot.readI32();
          struct.setMasterIpIsSet(true);
        }
      }
    }

  }

  public static class batchInsertObjects_result implements org.apache.thrift.TBase<batchInsertObjects_result, batchInsertObjects_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchInsertObjects_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchInsertObjects_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchInsertObjects_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchInsertObjects_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchInsertObjects_result.class, metaDataMap);
    }

    public batchInsertObjects_result() {
    }

    public batchInsertObjects_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchInsertObjects_result(batchInsertObjects_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public batchInsertObjects_result deepCopy() {
      return new batchInsertObjects_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public batchInsertObjects_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchInsertObjects_result)
        return this.equals((batchInsertObjects_result)that);
      return false;
    }

    public boolean equals(batchInsertObjects_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchInsertObjects_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchInsertObjects_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchInsertObjects_resultStandardSchemeFactory implements SchemeFactory {
      public batchInsertObjects_resultStandardScheme getScheme() {
        return new batchInsertObjects_resultStandardScheme();
      }
    }

    private static class batchInsertObjects_resultStandardScheme extends StandardScheme<batchInsertObjects_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchInsertObjects_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchInsertObjects_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchInsertObjects_resultTupleSchemeFactory implements SchemeFactory {
      public batchInsertObjects_resultTupleScheme getScheme() {
        return new batchInsertObjects_resultTupleScheme();
      }
    }

    private static class batchInsertObjects_resultTupleScheme extends TupleScheme<batchInsertObjects_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchInsertObjects_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchInsertObjects_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class pointQueryCount_args implements org.apache.thrift.TBase<pointQueryCount_args, pointQueryCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<pointQueryCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pointQueryCount_args");

    private static final org.apache.thrift.protocol.TField TB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tbName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QV_FIELD_DESC = new org.apache.thrift.protocol.TField("qv", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField MASTER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("masterIp", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pointQueryCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pointQueryCount_argsTupleSchemeFactory());
    }

    public String tbName; // required
    public List<Integer> qv; // required
    public int masterIp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TB_NAME((short)1, "tbName"),
      QV((short)2, "qv"),
      MASTER_IP((short)3, "masterIp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TB_NAME
            return TB_NAME;
          case 2: // QV
            return QV;
          case 3: // MASTER_IP
            return MASTER_IP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MASTERIP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TB_NAME, new org.apache.thrift.meta_data.FieldMetaData("tbName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QV, new org.apache.thrift.meta_data.FieldMetaData("qv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.MASTER_IP, new org.apache.thrift.meta_data.FieldMetaData("masterIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pointQueryCount_args.class, metaDataMap);
    }

    public pointQueryCount_args() {
    }

    public pointQueryCount_args(
      String tbName,
      List<Integer> qv,
      int masterIp)
    {
      this();
      this.tbName = tbName;
      this.qv = qv;
      this.masterIp = masterIp;
      setMasterIpIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pointQueryCount_args(pointQueryCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTbName()) {
        this.tbName = other.tbName;
      }
      if (other.isSetQv()) {
        List<Integer> __this__qv = new ArrayList<Integer>(other.qv);
        this.qv = __this__qv;
      }
      this.masterIp = other.masterIp;
    }

    public pointQueryCount_args deepCopy() {
      return new pointQueryCount_args(this);
    }

    @Override
    public void clear() {
      this.tbName = null;
      this.qv = null;
      setMasterIpIsSet(false);
      this.masterIp = 0;
    }

    public String getTbName() {
      return this.tbName;
    }

    public pointQueryCount_args setTbName(String tbName) {
      this.tbName = tbName;
      return this;
    }

    public void unsetTbName() {
      this.tbName = null;
    }

    /** Returns true if field tbName is set (has been assigned a value) and false otherwise */
    public boolean isSetTbName() {
      return this.tbName != null;
    }

    public void setTbNameIsSet(boolean value) {
      if (!value) {
        this.tbName = null;
      }
    }

    public int getQvSize() {
      return (this.qv == null) ? 0 : this.qv.size();
    }

    public java.util.Iterator<Integer> getQvIterator() {
      return (this.qv == null) ? null : this.qv.iterator();
    }

    public void addToQv(int elem) {
      if (this.qv == null) {
        this.qv = new ArrayList<Integer>();
      }
      this.qv.add(elem);
    }

    public List<Integer> getQv() {
      return this.qv;
    }

    public pointQueryCount_args setQv(List<Integer> qv) {
      this.qv = qv;
      return this;
    }

    public void unsetQv() {
      this.qv = null;
    }

    /** Returns true if field qv is set (has been assigned a value) and false otherwise */
    public boolean isSetQv() {
      return this.qv != null;
    }

    public void setQvIsSet(boolean value) {
      if (!value) {
        this.qv = null;
      }
    }

    public int getMasterIp() {
      return this.masterIp;
    }

    public pointQueryCount_args setMasterIp(int masterIp) {
      this.masterIp = masterIp;
      setMasterIpIsSet(true);
      return this;
    }

    public void unsetMasterIp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MASTERIP_ISSET_ID);
    }

    /** Returns true if field masterIp is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterIp() {
      return EncodingUtils.testBit(__isset_bitfield, __MASTERIP_ISSET_ID);
    }

    public void setMasterIpIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MASTERIP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TB_NAME:
        if (value == null) {
          unsetTbName();
        } else {
          setTbName((String)value);
        }
        break;

      case QV:
        if (value == null) {
          unsetQv();
        } else {
          setQv((List<Integer>)value);
        }
        break;

      case MASTER_IP:
        if (value == null) {
          unsetMasterIp();
        } else {
          setMasterIp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TB_NAME:
        return getTbName();

      case QV:
        return getQv();

      case MASTER_IP:
        return Integer.valueOf(getMasterIp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TB_NAME:
        return isSetTbName();
      case QV:
        return isSetQv();
      case MASTER_IP:
        return isSetMasterIp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pointQueryCount_args)
        return this.equals((pointQueryCount_args)that);
      return false;
    }

    public boolean equals(pointQueryCount_args that) {
      if (that == null)
        return false;

      boolean this_present_tbName = true && this.isSetTbName();
      boolean that_present_tbName = true && that.isSetTbName();
      if (this_present_tbName || that_present_tbName) {
        if (!(this_present_tbName && that_present_tbName))
          return false;
        if (!this.tbName.equals(that.tbName))
          return false;
      }

      boolean this_present_qv = true && this.isSetQv();
      boolean that_present_qv = true && that.isSetQv();
      if (this_present_qv || that_present_qv) {
        if (!(this_present_qv && that_present_qv))
          return false;
        if (!this.qv.equals(that.qv))
          return false;
      }

      boolean this_present_masterIp = true;
      boolean that_present_masterIp = true;
      if (this_present_masterIp || that_present_masterIp) {
        if (!(this_present_masterIp && that_present_masterIp))
          return false;
        if (this.masterIp != that.masterIp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(pointQueryCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTbName()).compareTo(other.isSetTbName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTbName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbName, other.tbName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQv()).compareTo(other.isSetQv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qv, other.qv);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMasterIp()).compareTo(other.isSetMasterIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterIp, other.masterIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pointQueryCount_args(");
      boolean first = true;

      sb.append("tbName:");
      if (this.tbName == null) {
        sb.append("null");
      } else {
        sb.append(this.tbName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qv:");
      if (this.qv == null) {
        sb.append("null");
      } else {
        sb.append(this.qv);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("masterIp:");
      sb.append(this.masterIp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pointQueryCount_argsStandardSchemeFactory implements SchemeFactory {
      public pointQueryCount_argsStandardScheme getScheme() {
        return new pointQueryCount_argsStandardScheme();
      }
    }

    private static class pointQueryCount_argsStandardScheme extends StandardScheme<pointQueryCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pointQueryCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TB_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tbName = iprot.readString();
                struct.setTbNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QV
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list222 = iprot.readListBegin();
                  struct.qv = new ArrayList<Integer>(_list222.size);
                  for (int _i223 = 0; _i223 < _list222.size; ++_i223)
                  {
                    int _elem224;
                    _elem224 = iprot.readI32();
                    struct.qv.add(_elem224);
                  }
                  iprot.readListEnd();
                }
                struct.setQvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MASTER_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.masterIp = iprot.readI32();
                struct.setMasterIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pointQueryCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tbName != null) {
          oprot.writeFieldBegin(TB_NAME_FIELD_DESC);
          oprot.writeString(struct.tbName);
          oprot.writeFieldEnd();
        }
        if (struct.qv != null) {
          oprot.writeFieldBegin(QV_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.qv.size()));
            for (int _iter225 : struct.qv)
            {
              oprot.writeI32(_iter225);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MASTER_IP_FIELD_DESC);
        oprot.writeI32(struct.masterIp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pointQueryCount_argsTupleSchemeFactory implements SchemeFactory {
      public pointQueryCount_argsTupleScheme getScheme() {
        return new pointQueryCount_argsTupleScheme();
      }
    }

    private static class pointQueryCount_argsTupleScheme extends TupleScheme<pointQueryCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pointQueryCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTbName()) {
          optionals.set(0);
        }
        if (struct.isSetQv()) {
          optionals.set(1);
        }
        if (struct.isSetMasterIp()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTbName()) {
          oprot.writeString(struct.tbName);
        }
        if (struct.isSetQv()) {
          {
            oprot.writeI32(struct.qv.size());
            for (int _iter226 : struct.qv)
            {
              oprot.writeI32(_iter226);
            }
          }
        }
        if (struct.isSetMasterIp()) {
          oprot.writeI32(struct.masterIp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pointQueryCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.tbName = iprot.readString();
          struct.setTbNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list227 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.qv = new ArrayList<Integer>(_list227.size);
            for (int _i228 = 0; _i228 < _list227.size; ++_i228)
            {
              int _elem229;
              _elem229 = iprot.readI32();
              struct.qv.add(_elem229);
            }
          }
          struct.setQvIsSet(true);
        }
        if (incoming.get(2)) {
          struct.masterIp = iprot.readI32();
          struct.setMasterIpIsSet(true);
        }
      }
    }

  }

  public static class pointQueryCount_result implements org.apache.thrift.TBase<pointQueryCount_result, pointQueryCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<pointQueryCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pointQueryCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pointQueryCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pointQueryCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pointQueryCount_result.class, metaDataMap);
    }

    public pointQueryCount_result() {
    }

    public pointQueryCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pointQueryCount_result(pointQueryCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public pointQueryCount_result deepCopy() {
      return new pointQueryCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public pointQueryCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pointQueryCount_result)
        return this.equals((pointQueryCount_result)that);
      return false;
    }

    public boolean equals(pointQueryCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(pointQueryCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pointQueryCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pointQueryCount_resultStandardSchemeFactory implements SchemeFactory {
      public pointQueryCount_resultStandardScheme getScheme() {
        return new pointQueryCount_resultStandardScheme();
      }
    }

    private static class pointQueryCount_resultStandardScheme extends StandardScheme<pointQueryCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pointQueryCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pointQueryCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pointQueryCount_resultTupleSchemeFactory implements SchemeFactory {
      public pointQueryCount_resultTupleScheme getScheme() {
        return new pointQueryCount_resultTupleScheme();
      }
    }

    private static class pointQueryCount_resultTupleScheme extends TupleScheme<pointQueryCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pointQueryCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pointQueryCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class pointQuery_args implements org.apache.thrift.TBase<pointQuery_args, pointQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<pointQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pointQuery_args");

    private static final org.apache.thrift.protocol.TField TB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tbName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QV_FIELD_DESC = new org.apache.thrift.protocol.TField("qv", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField MASTER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("masterIp", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField RET_COL_FIELD_DESC = new org.apache.thrift.protocol.TField("retCol", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pointQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pointQuery_argsTupleSchemeFactory());
    }

    public String tbName; // required
    public List<Integer> qv; // required
    public int masterIp; // required
    public List<Integer> retCol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TB_NAME((short)1, "tbName"),
      QV((short)2, "qv"),
      MASTER_IP((short)3, "masterIp"),
      RET_COL((short)4, "retCol");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TB_NAME
            return TB_NAME;
          case 2: // QV
            return QV;
          case 3: // MASTER_IP
            return MASTER_IP;
          case 4: // RET_COL
            return RET_COL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MASTERIP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TB_NAME, new org.apache.thrift.meta_data.FieldMetaData("tbName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QV, new org.apache.thrift.meta_data.FieldMetaData("qv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.MASTER_IP, new org.apache.thrift.meta_data.FieldMetaData("masterIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RET_COL, new org.apache.thrift.meta_data.FieldMetaData("retCol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pointQuery_args.class, metaDataMap);
    }

    public pointQuery_args() {
    }

    public pointQuery_args(
      String tbName,
      List<Integer> qv,
      int masterIp,
      List<Integer> retCol)
    {
      this();
      this.tbName = tbName;
      this.qv = qv;
      this.masterIp = masterIp;
      setMasterIpIsSet(true);
      this.retCol = retCol;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pointQuery_args(pointQuery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTbName()) {
        this.tbName = other.tbName;
      }
      if (other.isSetQv()) {
        List<Integer> __this__qv = new ArrayList<Integer>(other.qv);
        this.qv = __this__qv;
      }
      this.masterIp = other.masterIp;
      if (other.isSetRetCol()) {
        List<Integer> __this__retCol = new ArrayList<Integer>(other.retCol);
        this.retCol = __this__retCol;
      }
    }

    public pointQuery_args deepCopy() {
      return new pointQuery_args(this);
    }

    @Override
    public void clear() {
      this.tbName = null;
      this.qv = null;
      setMasterIpIsSet(false);
      this.masterIp = 0;
      this.retCol = null;
    }

    public String getTbName() {
      return this.tbName;
    }

    public pointQuery_args setTbName(String tbName) {
      this.tbName = tbName;
      return this;
    }

    public void unsetTbName() {
      this.tbName = null;
    }

    /** Returns true if field tbName is set (has been assigned a value) and false otherwise */
    public boolean isSetTbName() {
      return this.tbName != null;
    }

    public void setTbNameIsSet(boolean value) {
      if (!value) {
        this.tbName = null;
      }
    }

    public int getQvSize() {
      return (this.qv == null) ? 0 : this.qv.size();
    }

    public java.util.Iterator<Integer> getQvIterator() {
      return (this.qv == null) ? null : this.qv.iterator();
    }

    public void addToQv(int elem) {
      if (this.qv == null) {
        this.qv = new ArrayList<Integer>();
      }
      this.qv.add(elem);
    }

    public List<Integer> getQv() {
      return this.qv;
    }

    public pointQuery_args setQv(List<Integer> qv) {
      this.qv = qv;
      return this;
    }

    public void unsetQv() {
      this.qv = null;
    }

    /** Returns true if field qv is set (has been assigned a value) and false otherwise */
    public boolean isSetQv() {
      return this.qv != null;
    }

    public void setQvIsSet(boolean value) {
      if (!value) {
        this.qv = null;
      }
    }

    public int getMasterIp() {
      return this.masterIp;
    }

    public pointQuery_args setMasterIp(int masterIp) {
      this.masterIp = masterIp;
      setMasterIpIsSet(true);
      return this;
    }

    public void unsetMasterIp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MASTERIP_ISSET_ID);
    }

    /** Returns true if field masterIp is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterIp() {
      return EncodingUtils.testBit(__isset_bitfield, __MASTERIP_ISSET_ID);
    }

    public void setMasterIpIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MASTERIP_ISSET_ID, value);
    }

    public int getRetColSize() {
      return (this.retCol == null) ? 0 : this.retCol.size();
    }

    public java.util.Iterator<Integer> getRetColIterator() {
      return (this.retCol == null) ? null : this.retCol.iterator();
    }

    public void addToRetCol(int elem) {
      if (this.retCol == null) {
        this.retCol = new ArrayList<Integer>();
      }
      this.retCol.add(elem);
    }

    public List<Integer> getRetCol() {
      return this.retCol;
    }

    public pointQuery_args setRetCol(List<Integer> retCol) {
      this.retCol = retCol;
      return this;
    }

    public void unsetRetCol() {
      this.retCol = null;
    }

    /** Returns true if field retCol is set (has been assigned a value) and false otherwise */
    public boolean isSetRetCol() {
      return this.retCol != null;
    }

    public void setRetColIsSet(boolean value) {
      if (!value) {
        this.retCol = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TB_NAME:
        if (value == null) {
          unsetTbName();
        } else {
          setTbName((String)value);
        }
        break;

      case QV:
        if (value == null) {
          unsetQv();
        } else {
          setQv((List<Integer>)value);
        }
        break;

      case MASTER_IP:
        if (value == null) {
          unsetMasterIp();
        } else {
          setMasterIp((Integer)value);
        }
        break;

      case RET_COL:
        if (value == null) {
          unsetRetCol();
        } else {
          setRetCol((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TB_NAME:
        return getTbName();

      case QV:
        return getQv();

      case MASTER_IP:
        return Integer.valueOf(getMasterIp());

      case RET_COL:
        return getRetCol();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TB_NAME:
        return isSetTbName();
      case QV:
        return isSetQv();
      case MASTER_IP:
        return isSetMasterIp();
      case RET_COL:
        return isSetRetCol();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pointQuery_args)
        return this.equals((pointQuery_args)that);
      return false;
    }

    public boolean equals(pointQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_tbName = true && this.isSetTbName();
      boolean that_present_tbName = true && that.isSetTbName();
      if (this_present_tbName || that_present_tbName) {
        if (!(this_present_tbName && that_present_tbName))
          return false;
        if (!this.tbName.equals(that.tbName))
          return false;
      }

      boolean this_present_qv = true && this.isSetQv();
      boolean that_present_qv = true && that.isSetQv();
      if (this_present_qv || that_present_qv) {
        if (!(this_present_qv && that_present_qv))
          return false;
        if (!this.qv.equals(that.qv))
          return false;
      }

      boolean this_present_masterIp = true;
      boolean that_present_masterIp = true;
      if (this_present_masterIp || that_present_masterIp) {
        if (!(this_present_masterIp && that_present_masterIp))
          return false;
        if (this.masterIp != that.masterIp)
          return false;
      }

      boolean this_present_retCol = true && this.isSetRetCol();
      boolean that_present_retCol = true && that.isSetRetCol();
      if (this_present_retCol || that_present_retCol) {
        if (!(this_present_retCol && that_present_retCol))
          return false;
        if (!this.retCol.equals(that.retCol))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(pointQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTbName()).compareTo(other.isSetTbName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTbName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbName, other.tbName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQv()).compareTo(other.isSetQv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qv, other.qv);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMasterIp()).compareTo(other.isSetMasterIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterIp, other.masterIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRetCol()).compareTo(other.isSetRetCol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRetCol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retCol, other.retCol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pointQuery_args(");
      boolean first = true;

      sb.append("tbName:");
      if (this.tbName == null) {
        sb.append("null");
      } else {
        sb.append(this.tbName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qv:");
      if (this.qv == null) {
        sb.append("null");
      } else {
        sb.append(this.qv);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("masterIp:");
      sb.append(this.masterIp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("retCol:");
      if (this.retCol == null) {
        sb.append("null");
      } else {
        sb.append(this.retCol);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pointQuery_argsStandardSchemeFactory implements SchemeFactory {
      public pointQuery_argsStandardScheme getScheme() {
        return new pointQuery_argsStandardScheme();
      }
    }

    private static class pointQuery_argsStandardScheme extends StandardScheme<pointQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pointQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TB_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tbName = iprot.readString();
                struct.setTbNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QV
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list230 = iprot.readListBegin();
                  struct.qv = new ArrayList<Integer>(_list230.size);
                  for (int _i231 = 0; _i231 < _list230.size; ++_i231)
                  {
                    int _elem232;
                    _elem232 = iprot.readI32();
                    struct.qv.add(_elem232);
                  }
                  iprot.readListEnd();
                }
                struct.setQvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MASTER_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.masterIp = iprot.readI32();
                struct.setMasterIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RET_COL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list233 = iprot.readListBegin();
                  struct.retCol = new ArrayList<Integer>(_list233.size);
                  for (int _i234 = 0; _i234 < _list233.size; ++_i234)
                  {
                    int _elem235;
                    _elem235 = iprot.readI32();
                    struct.retCol.add(_elem235);
                  }
                  iprot.readListEnd();
                }
                struct.setRetColIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pointQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tbName != null) {
          oprot.writeFieldBegin(TB_NAME_FIELD_DESC);
          oprot.writeString(struct.tbName);
          oprot.writeFieldEnd();
        }
        if (struct.qv != null) {
          oprot.writeFieldBegin(QV_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.qv.size()));
            for (int _iter236 : struct.qv)
            {
              oprot.writeI32(_iter236);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MASTER_IP_FIELD_DESC);
        oprot.writeI32(struct.masterIp);
        oprot.writeFieldEnd();
        if (struct.retCol != null) {
          oprot.writeFieldBegin(RET_COL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.retCol.size()));
            for (int _iter237 : struct.retCol)
            {
              oprot.writeI32(_iter237);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pointQuery_argsTupleSchemeFactory implements SchemeFactory {
      public pointQuery_argsTupleScheme getScheme() {
        return new pointQuery_argsTupleScheme();
      }
    }

    private static class pointQuery_argsTupleScheme extends TupleScheme<pointQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pointQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTbName()) {
          optionals.set(0);
        }
        if (struct.isSetQv()) {
          optionals.set(1);
        }
        if (struct.isSetMasterIp()) {
          optionals.set(2);
        }
        if (struct.isSetRetCol()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTbName()) {
          oprot.writeString(struct.tbName);
        }
        if (struct.isSetQv()) {
          {
            oprot.writeI32(struct.qv.size());
            for (int _iter238 : struct.qv)
            {
              oprot.writeI32(_iter238);
            }
          }
        }
        if (struct.isSetMasterIp()) {
          oprot.writeI32(struct.masterIp);
        }
        if (struct.isSetRetCol()) {
          {
            oprot.writeI32(struct.retCol.size());
            for (int _iter239 : struct.retCol)
            {
              oprot.writeI32(_iter239);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pointQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.tbName = iprot.readString();
          struct.setTbNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list240 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.qv = new ArrayList<Integer>(_list240.size);
            for (int _i241 = 0; _i241 < _list240.size; ++_i241)
            {
              int _elem242;
              _elem242 = iprot.readI32();
              struct.qv.add(_elem242);
            }
          }
          struct.setQvIsSet(true);
        }
        if (incoming.get(2)) {
          struct.masterIp = iprot.readI32();
          struct.setMasterIpIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list243 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.retCol = new ArrayList<Integer>(_list243.size);
            for (int _i244 = 0; _i244 < _list243.size; ++_i244)
            {
              int _elem245;
              _elem245 = iprot.readI32();
              struct.retCol.add(_elem245);
            }
          }
          struct.setRetColIsSet(true);
        }
      }
    }

  }

  public static class pointQuery_result implements org.apache.thrift.TBase<pointQuery_result, pointQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<pointQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pointQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pointQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pointQuery_resultTupleSchemeFactory());
    }

    public List<SPKVRow> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SPKVRow.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pointQuery_result.class, metaDataMap);
    }

    public pointQuery_result() {
    }

    public pointQuery_result(
      List<SPKVRow> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pointQuery_result(pointQuery_result other) {
      if (other.isSetSuccess()) {
        List<SPKVRow> __this__success = new ArrayList<SPKVRow>(other.success.size());
        for (SPKVRow other_element : other.success) {
          __this__success.add(new SPKVRow(other_element));
        }
        this.success = __this__success;
      }
    }

    public pointQuery_result deepCopy() {
      return new pointQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SPKVRow> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SPKVRow elem) {
      if (this.success == null) {
        this.success = new ArrayList<SPKVRow>();
      }
      this.success.add(elem);
    }

    public List<SPKVRow> getSuccess() {
      return this.success;
    }

    public pointQuery_result setSuccess(List<SPKVRow> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SPKVRow>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pointQuery_result)
        return this.equals((pointQuery_result)that);
      return false;
    }

    public boolean equals(pointQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(pointQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pointQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pointQuery_resultStandardSchemeFactory implements SchemeFactory {
      public pointQuery_resultStandardScheme getScheme() {
        return new pointQuery_resultStandardScheme();
      }
    }

    private static class pointQuery_resultStandardScheme extends StandardScheme<pointQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pointQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list246 = iprot.readListBegin();
                  struct.success = new ArrayList<SPKVRow>(_list246.size);
                  for (int _i247 = 0; _i247 < _list246.size; ++_i247)
                  {
                    SPKVRow _elem248;
                    _elem248 = new SPKVRow();
                    _elem248.read(iprot);
                    struct.success.add(_elem248);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pointQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SPKVRow _iter249 : struct.success)
            {
              _iter249.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pointQuery_resultTupleSchemeFactory implements SchemeFactory {
      public pointQuery_resultTupleScheme getScheme() {
        return new pointQuery_resultTupleScheme();
      }
    }

    private static class pointQuery_resultTupleScheme extends TupleScheme<pointQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pointQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SPKVRow _iter250 : struct.success)
            {
              _iter250.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pointQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list251 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SPKVRow>(_list251.size);
            for (int _i252 = 0; _i252 < _list251.size; ++_i252)
            {
              SPKVRow _elem253;
              _elem253 = new SPKVRow();
              _elem253.read(iprot);
              struct.success.add(_elem253);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rangeQueryCount_args implements org.apache.thrift.TBase<rangeQueryCount_args, rangeQueryCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<rangeQueryCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rangeQueryCount_args");

    private static final org.apache.thrift.protocol.TField TB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tbName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QL_FIELD_DESC = new org.apache.thrift.protocol.TField("ql", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField QU_FIELD_DESC = new org.apache.thrift.protocol.TField("qu", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField MASTER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("masterIp", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rangeQueryCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rangeQueryCount_argsTupleSchemeFactory());
    }

    public String tbName; // required
    public List<Integer> ql; // required
    public List<Integer> qu; // required
    public int masterIp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TB_NAME((short)1, "tbName"),
      QL((short)2, "ql"),
      QU((short)3, "qu"),
      MASTER_IP((short)4, "masterIp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TB_NAME
            return TB_NAME;
          case 2: // QL
            return QL;
          case 3: // QU
            return QU;
          case 4: // MASTER_IP
            return MASTER_IP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MASTERIP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TB_NAME, new org.apache.thrift.meta_data.FieldMetaData("tbName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QL, new org.apache.thrift.meta_data.FieldMetaData("ql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.QU, new org.apache.thrift.meta_data.FieldMetaData("qu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.MASTER_IP, new org.apache.thrift.meta_data.FieldMetaData("masterIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rangeQueryCount_args.class, metaDataMap);
    }

    public rangeQueryCount_args() {
    }

    public rangeQueryCount_args(
      String tbName,
      List<Integer> ql,
      List<Integer> qu,
      int masterIp)
    {
      this();
      this.tbName = tbName;
      this.ql = ql;
      this.qu = qu;
      this.masterIp = masterIp;
      setMasterIpIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rangeQueryCount_args(rangeQueryCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTbName()) {
        this.tbName = other.tbName;
      }
      if (other.isSetQl()) {
        List<Integer> __this__ql = new ArrayList<Integer>(other.ql);
        this.ql = __this__ql;
      }
      if (other.isSetQu()) {
        List<Integer> __this__qu = new ArrayList<Integer>(other.qu);
        this.qu = __this__qu;
      }
      this.masterIp = other.masterIp;
    }

    public rangeQueryCount_args deepCopy() {
      return new rangeQueryCount_args(this);
    }

    @Override
    public void clear() {
      this.tbName = null;
      this.ql = null;
      this.qu = null;
      setMasterIpIsSet(false);
      this.masterIp = 0;
    }

    public String getTbName() {
      return this.tbName;
    }

    public rangeQueryCount_args setTbName(String tbName) {
      this.tbName = tbName;
      return this;
    }

    public void unsetTbName() {
      this.tbName = null;
    }

    /** Returns true if field tbName is set (has been assigned a value) and false otherwise */
    public boolean isSetTbName() {
      return this.tbName != null;
    }

    public void setTbNameIsSet(boolean value) {
      if (!value) {
        this.tbName = null;
      }
    }

    public int getQlSize() {
      return (this.ql == null) ? 0 : this.ql.size();
    }

    public java.util.Iterator<Integer> getQlIterator() {
      return (this.ql == null) ? null : this.ql.iterator();
    }

    public void addToQl(int elem) {
      if (this.ql == null) {
        this.ql = new ArrayList<Integer>();
      }
      this.ql.add(elem);
    }

    public List<Integer> getQl() {
      return this.ql;
    }

    public rangeQueryCount_args setQl(List<Integer> ql) {
      this.ql = ql;
      return this;
    }

    public void unsetQl() {
      this.ql = null;
    }

    /** Returns true if field ql is set (has been assigned a value) and false otherwise */
    public boolean isSetQl() {
      return this.ql != null;
    }

    public void setQlIsSet(boolean value) {
      if (!value) {
        this.ql = null;
      }
    }

    public int getQuSize() {
      return (this.qu == null) ? 0 : this.qu.size();
    }

    public java.util.Iterator<Integer> getQuIterator() {
      return (this.qu == null) ? null : this.qu.iterator();
    }

    public void addToQu(int elem) {
      if (this.qu == null) {
        this.qu = new ArrayList<Integer>();
      }
      this.qu.add(elem);
    }

    public List<Integer> getQu() {
      return this.qu;
    }

    public rangeQueryCount_args setQu(List<Integer> qu) {
      this.qu = qu;
      return this;
    }

    public void unsetQu() {
      this.qu = null;
    }

    /** Returns true if field qu is set (has been assigned a value) and false otherwise */
    public boolean isSetQu() {
      return this.qu != null;
    }

    public void setQuIsSet(boolean value) {
      if (!value) {
        this.qu = null;
      }
    }

    public int getMasterIp() {
      return this.masterIp;
    }

    public rangeQueryCount_args setMasterIp(int masterIp) {
      this.masterIp = masterIp;
      setMasterIpIsSet(true);
      return this;
    }

    public void unsetMasterIp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MASTERIP_ISSET_ID);
    }

    /** Returns true if field masterIp is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterIp() {
      return EncodingUtils.testBit(__isset_bitfield, __MASTERIP_ISSET_ID);
    }

    public void setMasterIpIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MASTERIP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TB_NAME:
        if (value == null) {
          unsetTbName();
        } else {
          setTbName((String)value);
        }
        break;

      case QL:
        if (value == null) {
          unsetQl();
        } else {
          setQl((List<Integer>)value);
        }
        break;

      case QU:
        if (value == null) {
          unsetQu();
        } else {
          setQu((List<Integer>)value);
        }
        break;

      case MASTER_IP:
        if (value == null) {
          unsetMasterIp();
        } else {
          setMasterIp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TB_NAME:
        return getTbName();

      case QL:
        return getQl();

      case QU:
        return getQu();

      case MASTER_IP:
        return Integer.valueOf(getMasterIp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TB_NAME:
        return isSetTbName();
      case QL:
        return isSetQl();
      case QU:
        return isSetQu();
      case MASTER_IP:
        return isSetMasterIp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rangeQueryCount_args)
        return this.equals((rangeQueryCount_args)that);
      return false;
    }

    public boolean equals(rangeQueryCount_args that) {
      if (that == null)
        return false;

      boolean this_present_tbName = true && this.isSetTbName();
      boolean that_present_tbName = true && that.isSetTbName();
      if (this_present_tbName || that_present_tbName) {
        if (!(this_present_tbName && that_present_tbName))
          return false;
        if (!this.tbName.equals(that.tbName))
          return false;
      }

      boolean this_present_ql = true && this.isSetQl();
      boolean that_present_ql = true && that.isSetQl();
      if (this_present_ql || that_present_ql) {
        if (!(this_present_ql && that_present_ql))
          return false;
        if (!this.ql.equals(that.ql))
          return false;
      }

      boolean this_present_qu = true && this.isSetQu();
      boolean that_present_qu = true && that.isSetQu();
      if (this_present_qu || that_present_qu) {
        if (!(this_present_qu && that_present_qu))
          return false;
        if (!this.qu.equals(that.qu))
          return false;
      }

      boolean this_present_masterIp = true;
      boolean that_present_masterIp = true;
      if (this_present_masterIp || that_present_masterIp) {
        if (!(this_present_masterIp && that_present_masterIp))
          return false;
        if (this.masterIp != that.masterIp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(rangeQueryCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTbName()).compareTo(other.isSetTbName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTbName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbName, other.tbName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQl()).compareTo(other.isSetQl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ql, other.ql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQu()).compareTo(other.isSetQu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qu, other.qu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMasterIp()).compareTo(other.isSetMasterIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterIp, other.masterIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rangeQueryCount_args(");
      boolean first = true;

      sb.append("tbName:");
      if (this.tbName == null) {
        sb.append("null");
      } else {
        sb.append(this.tbName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ql:");
      if (this.ql == null) {
        sb.append("null");
      } else {
        sb.append(this.ql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qu:");
      if (this.qu == null) {
        sb.append("null");
      } else {
        sb.append(this.qu);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("masterIp:");
      sb.append(this.masterIp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rangeQueryCount_argsStandardSchemeFactory implements SchemeFactory {
      public rangeQueryCount_argsStandardScheme getScheme() {
        return new rangeQueryCount_argsStandardScheme();
      }
    }

    private static class rangeQueryCount_argsStandardScheme extends StandardScheme<rangeQueryCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rangeQueryCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TB_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tbName = iprot.readString();
                struct.setTbNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list254 = iprot.readListBegin();
                  struct.ql = new ArrayList<Integer>(_list254.size);
                  for (int _i255 = 0; _i255 < _list254.size; ++_i255)
                  {
                    int _elem256;
                    _elem256 = iprot.readI32();
                    struct.ql.add(_elem256);
                  }
                  iprot.readListEnd();
                }
                struct.setQlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // QU
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list257 = iprot.readListBegin();
                  struct.qu = new ArrayList<Integer>(_list257.size);
                  for (int _i258 = 0; _i258 < _list257.size; ++_i258)
                  {
                    int _elem259;
                    _elem259 = iprot.readI32();
                    struct.qu.add(_elem259);
                  }
                  iprot.readListEnd();
                }
                struct.setQuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MASTER_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.masterIp = iprot.readI32();
                struct.setMasterIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rangeQueryCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tbName != null) {
          oprot.writeFieldBegin(TB_NAME_FIELD_DESC);
          oprot.writeString(struct.tbName);
          oprot.writeFieldEnd();
        }
        if (struct.ql != null) {
          oprot.writeFieldBegin(QL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.ql.size()));
            for (int _iter260 : struct.ql)
            {
              oprot.writeI32(_iter260);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qu != null) {
          oprot.writeFieldBegin(QU_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.qu.size()));
            for (int _iter261 : struct.qu)
            {
              oprot.writeI32(_iter261);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MASTER_IP_FIELD_DESC);
        oprot.writeI32(struct.masterIp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rangeQueryCount_argsTupleSchemeFactory implements SchemeFactory {
      public rangeQueryCount_argsTupleScheme getScheme() {
        return new rangeQueryCount_argsTupleScheme();
      }
    }

    private static class rangeQueryCount_argsTupleScheme extends TupleScheme<rangeQueryCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rangeQueryCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTbName()) {
          optionals.set(0);
        }
        if (struct.isSetQl()) {
          optionals.set(1);
        }
        if (struct.isSetQu()) {
          optionals.set(2);
        }
        if (struct.isSetMasterIp()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTbName()) {
          oprot.writeString(struct.tbName);
        }
        if (struct.isSetQl()) {
          {
            oprot.writeI32(struct.ql.size());
            for (int _iter262 : struct.ql)
            {
              oprot.writeI32(_iter262);
            }
          }
        }
        if (struct.isSetQu()) {
          {
            oprot.writeI32(struct.qu.size());
            for (int _iter263 : struct.qu)
            {
              oprot.writeI32(_iter263);
            }
          }
        }
        if (struct.isSetMasterIp()) {
          oprot.writeI32(struct.masterIp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rangeQueryCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.tbName = iprot.readString();
          struct.setTbNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list264 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.ql = new ArrayList<Integer>(_list264.size);
            for (int _i265 = 0; _i265 < _list264.size; ++_i265)
            {
              int _elem266;
              _elem266 = iprot.readI32();
              struct.ql.add(_elem266);
            }
          }
          struct.setQlIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list267 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.qu = new ArrayList<Integer>(_list267.size);
            for (int _i268 = 0; _i268 < _list267.size; ++_i268)
            {
              int _elem269;
              _elem269 = iprot.readI32();
              struct.qu.add(_elem269);
            }
          }
          struct.setQuIsSet(true);
        }
        if (incoming.get(3)) {
          struct.masterIp = iprot.readI32();
          struct.setMasterIpIsSet(true);
        }
      }
    }

  }

  public static class rangeQueryCount_result implements org.apache.thrift.TBase<rangeQueryCount_result, rangeQueryCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<rangeQueryCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rangeQueryCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rangeQueryCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rangeQueryCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rangeQueryCount_result.class, metaDataMap);
    }

    public rangeQueryCount_result() {
    }

    public rangeQueryCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rangeQueryCount_result(rangeQueryCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public rangeQueryCount_result deepCopy() {
      return new rangeQueryCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public rangeQueryCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rangeQueryCount_result)
        return this.equals((rangeQueryCount_result)that);
      return false;
    }

    public boolean equals(rangeQueryCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(rangeQueryCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rangeQueryCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rangeQueryCount_resultStandardSchemeFactory implements SchemeFactory {
      public rangeQueryCount_resultStandardScheme getScheme() {
        return new rangeQueryCount_resultStandardScheme();
      }
    }

    private static class rangeQueryCount_resultStandardScheme extends StandardScheme<rangeQueryCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rangeQueryCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rangeQueryCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rangeQueryCount_resultTupleSchemeFactory implements SchemeFactory {
      public rangeQueryCount_resultTupleScheme getScheme() {
        return new rangeQueryCount_resultTupleScheme();
      }
    }

    private static class rangeQueryCount_resultTupleScheme extends TupleScheme<rangeQueryCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rangeQueryCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rangeQueryCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rangeQuery_args implements org.apache.thrift.TBase<rangeQuery_args, rangeQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<rangeQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rangeQuery_args");

    private static final org.apache.thrift.protocol.TField TB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tbName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QL_FIELD_DESC = new org.apache.thrift.protocol.TField("ql", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField QU_FIELD_DESC = new org.apache.thrift.protocol.TField("qu", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField MASTER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("masterIp", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField RET_COL_FIELD_DESC = new org.apache.thrift.protocol.TField("retCol", org.apache.thrift.protocol.TType.LIST, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rangeQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rangeQuery_argsTupleSchemeFactory());
    }

    public String tbName; // required
    public List<Integer> ql; // required
    public List<Integer> qu; // required
    public int masterIp; // required
    public List<Integer> retCol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TB_NAME((short)1, "tbName"),
      QL((short)2, "ql"),
      QU((short)3, "qu"),
      MASTER_IP((short)4, "masterIp"),
      RET_COL((short)5, "retCol");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TB_NAME
            return TB_NAME;
          case 2: // QL
            return QL;
          case 3: // QU
            return QU;
          case 4: // MASTER_IP
            return MASTER_IP;
          case 5: // RET_COL
            return RET_COL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MASTERIP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TB_NAME, new org.apache.thrift.meta_data.FieldMetaData("tbName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QL, new org.apache.thrift.meta_data.FieldMetaData("ql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.QU, new org.apache.thrift.meta_data.FieldMetaData("qu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.MASTER_IP, new org.apache.thrift.meta_data.FieldMetaData("masterIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RET_COL, new org.apache.thrift.meta_data.FieldMetaData("retCol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rangeQuery_args.class, metaDataMap);
    }

    public rangeQuery_args() {
    }

    public rangeQuery_args(
      String tbName,
      List<Integer> ql,
      List<Integer> qu,
      int masterIp,
      List<Integer> retCol)
    {
      this();
      this.tbName = tbName;
      this.ql = ql;
      this.qu = qu;
      this.masterIp = masterIp;
      setMasterIpIsSet(true);
      this.retCol = retCol;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rangeQuery_args(rangeQuery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTbName()) {
        this.tbName = other.tbName;
      }
      if (other.isSetQl()) {
        List<Integer> __this__ql = new ArrayList<Integer>(other.ql);
        this.ql = __this__ql;
      }
      if (other.isSetQu()) {
        List<Integer> __this__qu = new ArrayList<Integer>(other.qu);
        this.qu = __this__qu;
      }
      this.masterIp = other.masterIp;
      if (other.isSetRetCol()) {
        List<Integer> __this__retCol = new ArrayList<Integer>(other.retCol);
        this.retCol = __this__retCol;
      }
    }

    public rangeQuery_args deepCopy() {
      return new rangeQuery_args(this);
    }

    @Override
    public void clear() {
      this.tbName = null;
      this.ql = null;
      this.qu = null;
      setMasterIpIsSet(false);
      this.masterIp = 0;
      this.retCol = null;
    }

    public String getTbName() {
      return this.tbName;
    }

    public rangeQuery_args setTbName(String tbName) {
      this.tbName = tbName;
      return this;
    }

    public void unsetTbName() {
      this.tbName = null;
    }

    /** Returns true if field tbName is set (has been assigned a value) and false otherwise */
    public boolean isSetTbName() {
      return this.tbName != null;
    }

    public void setTbNameIsSet(boolean value) {
      if (!value) {
        this.tbName = null;
      }
    }

    public int getQlSize() {
      return (this.ql == null) ? 0 : this.ql.size();
    }

    public java.util.Iterator<Integer> getQlIterator() {
      return (this.ql == null) ? null : this.ql.iterator();
    }

    public void addToQl(int elem) {
      if (this.ql == null) {
        this.ql = new ArrayList<Integer>();
      }
      this.ql.add(elem);
    }

    public List<Integer> getQl() {
      return this.ql;
    }

    public rangeQuery_args setQl(List<Integer> ql) {
      this.ql = ql;
      return this;
    }

    public void unsetQl() {
      this.ql = null;
    }

    /** Returns true if field ql is set (has been assigned a value) and false otherwise */
    public boolean isSetQl() {
      return this.ql != null;
    }

    public void setQlIsSet(boolean value) {
      if (!value) {
        this.ql = null;
      }
    }

    public int getQuSize() {
      return (this.qu == null) ? 0 : this.qu.size();
    }

    public java.util.Iterator<Integer> getQuIterator() {
      return (this.qu == null) ? null : this.qu.iterator();
    }

    public void addToQu(int elem) {
      if (this.qu == null) {
        this.qu = new ArrayList<Integer>();
      }
      this.qu.add(elem);
    }

    public List<Integer> getQu() {
      return this.qu;
    }

    public rangeQuery_args setQu(List<Integer> qu) {
      this.qu = qu;
      return this;
    }

    public void unsetQu() {
      this.qu = null;
    }

    /** Returns true if field qu is set (has been assigned a value) and false otherwise */
    public boolean isSetQu() {
      return this.qu != null;
    }

    public void setQuIsSet(boolean value) {
      if (!value) {
        this.qu = null;
      }
    }

    public int getMasterIp() {
      return this.masterIp;
    }

    public rangeQuery_args setMasterIp(int masterIp) {
      this.masterIp = masterIp;
      setMasterIpIsSet(true);
      return this;
    }

    public void unsetMasterIp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MASTERIP_ISSET_ID);
    }

    /** Returns true if field masterIp is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterIp() {
      return EncodingUtils.testBit(__isset_bitfield, __MASTERIP_ISSET_ID);
    }

    public void setMasterIpIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MASTERIP_ISSET_ID, value);
    }

    public int getRetColSize() {
      return (this.retCol == null) ? 0 : this.retCol.size();
    }

    public java.util.Iterator<Integer> getRetColIterator() {
      return (this.retCol == null) ? null : this.retCol.iterator();
    }

    public void addToRetCol(int elem) {
      if (this.retCol == null) {
        this.retCol = new ArrayList<Integer>();
      }
      this.retCol.add(elem);
    }

    public List<Integer> getRetCol() {
      return this.retCol;
    }

    public rangeQuery_args setRetCol(List<Integer> retCol) {
      this.retCol = retCol;
      return this;
    }

    public void unsetRetCol() {
      this.retCol = null;
    }

    /** Returns true if field retCol is set (has been assigned a value) and false otherwise */
    public boolean isSetRetCol() {
      return this.retCol != null;
    }

    public void setRetColIsSet(boolean value) {
      if (!value) {
        this.retCol = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TB_NAME:
        if (value == null) {
          unsetTbName();
        } else {
          setTbName((String)value);
        }
        break;

      case QL:
        if (value == null) {
          unsetQl();
        } else {
          setQl((List<Integer>)value);
        }
        break;

      case QU:
        if (value == null) {
          unsetQu();
        } else {
          setQu((List<Integer>)value);
        }
        break;

      case MASTER_IP:
        if (value == null) {
          unsetMasterIp();
        } else {
          setMasterIp((Integer)value);
        }
        break;

      case RET_COL:
        if (value == null) {
          unsetRetCol();
        } else {
          setRetCol((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TB_NAME:
        return getTbName();

      case QL:
        return getQl();

      case QU:
        return getQu();

      case MASTER_IP:
        return Integer.valueOf(getMasterIp());

      case RET_COL:
        return getRetCol();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TB_NAME:
        return isSetTbName();
      case QL:
        return isSetQl();
      case QU:
        return isSetQu();
      case MASTER_IP:
        return isSetMasterIp();
      case RET_COL:
        return isSetRetCol();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rangeQuery_args)
        return this.equals((rangeQuery_args)that);
      return false;
    }

    public boolean equals(rangeQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_tbName = true && this.isSetTbName();
      boolean that_present_tbName = true && that.isSetTbName();
      if (this_present_tbName || that_present_tbName) {
        if (!(this_present_tbName && that_present_tbName))
          return false;
        if (!this.tbName.equals(that.tbName))
          return false;
      }

      boolean this_present_ql = true && this.isSetQl();
      boolean that_present_ql = true && that.isSetQl();
      if (this_present_ql || that_present_ql) {
        if (!(this_present_ql && that_present_ql))
          return false;
        if (!this.ql.equals(that.ql))
          return false;
      }

      boolean this_present_qu = true && this.isSetQu();
      boolean that_present_qu = true && that.isSetQu();
      if (this_present_qu || that_present_qu) {
        if (!(this_present_qu && that_present_qu))
          return false;
        if (!this.qu.equals(that.qu))
          return false;
      }

      boolean this_present_masterIp = true;
      boolean that_present_masterIp = true;
      if (this_present_masterIp || that_present_masterIp) {
        if (!(this_present_masterIp && that_present_masterIp))
          return false;
        if (this.masterIp != that.masterIp)
          return false;
      }

      boolean this_present_retCol = true && this.isSetRetCol();
      boolean that_present_retCol = true && that.isSetRetCol();
      if (this_present_retCol || that_present_retCol) {
        if (!(this_present_retCol && that_present_retCol))
          return false;
        if (!this.retCol.equals(that.retCol))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(rangeQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTbName()).compareTo(other.isSetTbName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTbName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbName, other.tbName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQl()).compareTo(other.isSetQl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ql, other.ql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQu()).compareTo(other.isSetQu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qu, other.qu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMasterIp()).compareTo(other.isSetMasterIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterIp, other.masterIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRetCol()).compareTo(other.isSetRetCol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRetCol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retCol, other.retCol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rangeQuery_args(");
      boolean first = true;

      sb.append("tbName:");
      if (this.tbName == null) {
        sb.append("null");
      } else {
        sb.append(this.tbName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ql:");
      if (this.ql == null) {
        sb.append("null");
      } else {
        sb.append(this.ql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qu:");
      if (this.qu == null) {
        sb.append("null");
      } else {
        sb.append(this.qu);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("masterIp:");
      sb.append(this.masterIp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("retCol:");
      if (this.retCol == null) {
        sb.append("null");
      } else {
        sb.append(this.retCol);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rangeQuery_argsStandardSchemeFactory implements SchemeFactory {
      public rangeQuery_argsStandardScheme getScheme() {
        return new rangeQuery_argsStandardScheme();
      }
    }

    private static class rangeQuery_argsStandardScheme extends StandardScheme<rangeQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rangeQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TB_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tbName = iprot.readString();
                struct.setTbNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list270 = iprot.readListBegin();
                  struct.ql = new ArrayList<Integer>(_list270.size);
                  for (int _i271 = 0; _i271 < _list270.size; ++_i271)
                  {
                    int _elem272;
                    _elem272 = iprot.readI32();
                    struct.ql.add(_elem272);
                  }
                  iprot.readListEnd();
                }
                struct.setQlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // QU
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list273 = iprot.readListBegin();
                  struct.qu = new ArrayList<Integer>(_list273.size);
                  for (int _i274 = 0; _i274 < _list273.size; ++_i274)
                  {
                    int _elem275;
                    _elem275 = iprot.readI32();
                    struct.qu.add(_elem275);
                  }
                  iprot.readListEnd();
                }
                struct.setQuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MASTER_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.masterIp = iprot.readI32();
                struct.setMasterIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // RET_COL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list276 = iprot.readListBegin();
                  struct.retCol = new ArrayList<Integer>(_list276.size);
                  for (int _i277 = 0; _i277 < _list276.size; ++_i277)
                  {
                    int _elem278;
                    _elem278 = iprot.readI32();
                    struct.retCol.add(_elem278);
                  }
                  iprot.readListEnd();
                }
                struct.setRetColIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rangeQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tbName != null) {
          oprot.writeFieldBegin(TB_NAME_FIELD_DESC);
          oprot.writeString(struct.tbName);
          oprot.writeFieldEnd();
        }
        if (struct.ql != null) {
          oprot.writeFieldBegin(QL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.ql.size()));
            for (int _iter279 : struct.ql)
            {
              oprot.writeI32(_iter279);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qu != null) {
          oprot.writeFieldBegin(QU_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.qu.size()));
            for (int _iter280 : struct.qu)
            {
              oprot.writeI32(_iter280);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MASTER_IP_FIELD_DESC);
        oprot.writeI32(struct.masterIp);
        oprot.writeFieldEnd();
        if (struct.retCol != null) {
          oprot.writeFieldBegin(RET_COL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.retCol.size()));
            for (int _iter281 : struct.retCol)
            {
              oprot.writeI32(_iter281);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rangeQuery_argsTupleSchemeFactory implements SchemeFactory {
      public rangeQuery_argsTupleScheme getScheme() {
        return new rangeQuery_argsTupleScheme();
      }
    }

    private static class rangeQuery_argsTupleScheme extends TupleScheme<rangeQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rangeQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTbName()) {
          optionals.set(0);
        }
        if (struct.isSetQl()) {
          optionals.set(1);
        }
        if (struct.isSetQu()) {
          optionals.set(2);
        }
        if (struct.isSetMasterIp()) {
          optionals.set(3);
        }
        if (struct.isSetRetCol()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetTbName()) {
          oprot.writeString(struct.tbName);
        }
        if (struct.isSetQl()) {
          {
            oprot.writeI32(struct.ql.size());
            for (int _iter282 : struct.ql)
            {
              oprot.writeI32(_iter282);
            }
          }
        }
        if (struct.isSetQu()) {
          {
            oprot.writeI32(struct.qu.size());
            for (int _iter283 : struct.qu)
            {
              oprot.writeI32(_iter283);
            }
          }
        }
        if (struct.isSetMasterIp()) {
          oprot.writeI32(struct.masterIp);
        }
        if (struct.isSetRetCol()) {
          {
            oprot.writeI32(struct.retCol.size());
            for (int _iter284 : struct.retCol)
            {
              oprot.writeI32(_iter284);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rangeQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.tbName = iprot.readString();
          struct.setTbNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list285 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.ql = new ArrayList<Integer>(_list285.size);
            for (int _i286 = 0; _i286 < _list285.size; ++_i286)
            {
              int _elem287;
              _elem287 = iprot.readI32();
              struct.ql.add(_elem287);
            }
          }
          struct.setQlIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list288 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.qu = new ArrayList<Integer>(_list288.size);
            for (int _i289 = 0; _i289 < _list288.size; ++_i289)
            {
              int _elem290;
              _elem290 = iprot.readI32();
              struct.qu.add(_elem290);
            }
          }
          struct.setQuIsSet(true);
        }
        if (incoming.get(3)) {
          struct.masterIp = iprot.readI32();
          struct.setMasterIpIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list291 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.retCol = new ArrayList<Integer>(_list291.size);
            for (int _i292 = 0; _i292 < _list291.size; ++_i292)
            {
              int _elem293;
              _elem293 = iprot.readI32();
              struct.retCol.add(_elem293);
            }
          }
          struct.setRetColIsSet(true);
        }
      }
    }

  }

  public static class rangeQuery_result implements org.apache.thrift.TBase<rangeQuery_result, rangeQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<rangeQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rangeQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rangeQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rangeQuery_resultTupleSchemeFactory());
    }

    public List<SPKVRow> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SPKVRow.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rangeQuery_result.class, metaDataMap);
    }

    public rangeQuery_result() {
    }

    public rangeQuery_result(
      List<SPKVRow> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rangeQuery_result(rangeQuery_result other) {
      if (other.isSetSuccess()) {
        List<SPKVRow> __this__success = new ArrayList<SPKVRow>(other.success.size());
        for (SPKVRow other_element : other.success) {
          __this__success.add(new SPKVRow(other_element));
        }
        this.success = __this__success;
      }
    }

    public rangeQuery_result deepCopy() {
      return new rangeQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SPKVRow> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SPKVRow elem) {
      if (this.success == null) {
        this.success = new ArrayList<SPKVRow>();
      }
      this.success.add(elem);
    }

    public List<SPKVRow> getSuccess() {
      return this.success;
    }

    public rangeQuery_result setSuccess(List<SPKVRow> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SPKVRow>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rangeQuery_result)
        return this.equals((rangeQuery_result)that);
      return false;
    }

    public boolean equals(rangeQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(rangeQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rangeQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rangeQuery_resultStandardSchemeFactory implements SchemeFactory {
      public rangeQuery_resultStandardScheme getScheme() {
        return new rangeQuery_resultStandardScheme();
      }
    }

    private static class rangeQuery_resultStandardScheme extends StandardScheme<rangeQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rangeQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list294 = iprot.readListBegin();
                  struct.success = new ArrayList<SPKVRow>(_list294.size);
                  for (int _i295 = 0; _i295 < _list294.size; ++_i295)
                  {
                    SPKVRow _elem296;
                    _elem296 = new SPKVRow();
                    _elem296.read(iprot);
                    struct.success.add(_elem296);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rangeQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SPKVRow _iter297 : struct.success)
            {
              _iter297.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rangeQuery_resultTupleSchemeFactory implements SchemeFactory {
      public rangeQuery_resultTupleScheme getScheme() {
        return new rangeQuery_resultTupleScheme();
      }
    }

    private static class rangeQuery_resultTupleScheme extends TupleScheme<rangeQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rangeQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SPKVRow _iter298 : struct.success)
            {
              _iter298.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rangeQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list299 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SPKVRow>(_list299.size);
            for (int _i300 = 0; _i300 < _list299.size; ++_i300)
            {
              SPKVRow _elem301;
              _elem301 = new SPKVRow();
              _elem301.read(iprot);
              struct.success.add(_elem301);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class peerKnnQuery_args implements org.apache.thrift.TBase<peerKnnQuery_args, peerKnnQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<peerKnnQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("peerKnnQuery_args");

    private static final org.apache.thrift.protocol.TField TB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tbName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QV_FIELD_DESC = new org.apache.thrift.protocol.TField("qv", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField K_FIELD_DESC = new org.apache.thrift.protocol.TField("K", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField MASTER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("masterIp", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField RET_COL_FIELD_DESC = new org.apache.thrift.protocol.TField("retCol", org.apache.thrift.protocol.TType.LIST, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new peerKnnQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new peerKnnQuery_argsTupleSchemeFactory());
    }

    public String tbName; // required
    public List<Integer> qv; // required
    public int K; // required
    public int masterIp; // required
    public List<Integer> retCol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TB_NAME((short)1, "tbName"),
      QV((short)2, "qv"),
      K((short)3, "K"),
      MASTER_IP((short)4, "masterIp"),
      RET_COL((short)5, "retCol");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TB_NAME
            return TB_NAME;
          case 2: // QV
            return QV;
          case 3: // K
            return K;
          case 4: // MASTER_IP
            return MASTER_IP;
          case 5: // RET_COL
            return RET_COL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __K_ISSET_ID = 0;
    private static final int __MASTERIP_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TB_NAME, new org.apache.thrift.meta_data.FieldMetaData("tbName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QV, new org.apache.thrift.meta_data.FieldMetaData("qv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.K, new org.apache.thrift.meta_data.FieldMetaData("K", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MASTER_IP, new org.apache.thrift.meta_data.FieldMetaData("masterIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RET_COL, new org.apache.thrift.meta_data.FieldMetaData("retCol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(peerKnnQuery_args.class, metaDataMap);
    }

    public peerKnnQuery_args() {
    }

    public peerKnnQuery_args(
      String tbName,
      List<Integer> qv,
      int K,
      int masterIp,
      List<Integer> retCol)
    {
      this();
      this.tbName = tbName;
      this.qv = qv;
      this.K = K;
      setKIsSet(true);
      this.masterIp = masterIp;
      setMasterIpIsSet(true);
      this.retCol = retCol;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public peerKnnQuery_args(peerKnnQuery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTbName()) {
        this.tbName = other.tbName;
      }
      if (other.isSetQv()) {
        List<Integer> __this__qv = new ArrayList<Integer>(other.qv);
        this.qv = __this__qv;
      }
      this.K = other.K;
      this.masterIp = other.masterIp;
      if (other.isSetRetCol()) {
        List<Integer> __this__retCol = new ArrayList<Integer>(other.retCol);
        this.retCol = __this__retCol;
      }
    }

    public peerKnnQuery_args deepCopy() {
      return new peerKnnQuery_args(this);
    }

    @Override
    public void clear() {
      this.tbName = null;
      this.qv = null;
      setKIsSet(false);
      this.K = 0;
      setMasterIpIsSet(false);
      this.masterIp = 0;
      this.retCol = null;
    }

    public String getTbName() {
      return this.tbName;
    }

    public peerKnnQuery_args setTbName(String tbName) {
      this.tbName = tbName;
      return this;
    }

    public void unsetTbName() {
      this.tbName = null;
    }

    /** Returns true if field tbName is set (has been assigned a value) and false otherwise */
    public boolean isSetTbName() {
      return this.tbName != null;
    }

    public void setTbNameIsSet(boolean value) {
      if (!value) {
        this.tbName = null;
      }
    }

    public int getQvSize() {
      return (this.qv == null) ? 0 : this.qv.size();
    }

    public java.util.Iterator<Integer> getQvIterator() {
      return (this.qv == null) ? null : this.qv.iterator();
    }

    public void addToQv(int elem) {
      if (this.qv == null) {
        this.qv = new ArrayList<Integer>();
      }
      this.qv.add(elem);
    }

    public List<Integer> getQv() {
      return this.qv;
    }

    public peerKnnQuery_args setQv(List<Integer> qv) {
      this.qv = qv;
      return this;
    }

    public void unsetQv() {
      this.qv = null;
    }

    /** Returns true if field qv is set (has been assigned a value) and false otherwise */
    public boolean isSetQv() {
      return this.qv != null;
    }

    public void setQvIsSet(boolean value) {
      if (!value) {
        this.qv = null;
      }
    }

    public int getK() {
      return this.K;
    }

    public peerKnnQuery_args setK(int K) {
      this.K = K;
      setKIsSet(true);
      return this;
    }

    public void unsetK() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __K_ISSET_ID);
    }

    /** Returns true if field K is set (has been assigned a value) and false otherwise */
    public boolean isSetK() {
      return EncodingUtils.testBit(__isset_bitfield, __K_ISSET_ID);
    }

    public void setKIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __K_ISSET_ID, value);
    }

    public int getMasterIp() {
      return this.masterIp;
    }

    public peerKnnQuery_args setMasterIp(int masterIp) {
      this.masterIp = masterIp;
      setMasterIpIsSet(true);
      return this;
    }

    public void unsetMasterIp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MASTERIP_ISSET_ID);
    }

    /** Returns true if field masterIp is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterIp() {
      return EncodingUtils.testBit(__isset_bitfield, __MASTERIP_ISSET_ID);
    }

    public void setMasterIpIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MASTERIP_ISSET_ID, value);
    }

    public int getRetColSize() {
      return (this.retCol == null) ? 0 : this.retCol.size();
    }

    public java.util.Iterator<Integer> getRetColIterator() {
      return (this.retCol == null) ? null : this.retCol.iterator();
    }

    public void addToRetCol(int elem) {
      if (this.retCol == null) {
        this.retCol = new ArrayList<Integer>();
      }
      this.retCol.add(elem);
    }

    public List<Integer> getRetCol() {
      return this.retCol;
    }

    public peerKnnQuery_args setRetCol(List<Integer> retCol) {
      this.retCol = retCol;
      return this;
    }

    public void unsetRetCol() {
      this.retCol = null;
    }

    /** Returns true if field retCol is set (has been assigned a value) and false otherwise */
    public boolean isSetRetCol() {
      return this.retCol != null;
    }

    public void setRetColIsSet(boolean value) {
      if (!value) {
        this.retCol = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TB_NAME:
        if (value == null) {
          unsetTbName();
        } else {
          setTbName((String)value);
        }
        break;

      case QV:
        if (value == null) {
          unsetQv();
        } else {
          setQv((List<Integer>)value);
        }
        break;

      case K:
        if (value == null) {
          unsetK();
        } else {
          setK((Integer)value);
        }
        break;

      case MASTER_IP:
        if (value == null) {
          unsetMasterIp();
        } else {
          setMasterIp((Integer)value);
        }
        break;

      case RET_COL:
        if (value == null) {
          unsetRetCol();
        } else {
          setRetCol((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TB_NAME:
        return getTbName();

      case QV:
        return getQv();

      case K:
        return Integer.valueOf(getK());

      case MASTER_IP:
        return Integer.valueOf(getMasterIp());

      case RET_COL:
        return getRetCol();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TB_NAME:
        return isSetTbName();
      case QV:
        return isSetQv();
      case K:
        return isSetK();
      case MASTER_IP:
        return isSetMasterIp();
      case RET_COL:
        return isSetRetCol();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof peerKnnQuery_args)
        return this.equals((peerKnnQuery_args)that);
      return false;
    }

    public boolean equals(peerKnnQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_tbName = true && this.isSetTbName();
      boolean that_present_tbName = true && that.isSetTbName();
      if (this_present_tbName || that_present_tbName) {
        if (!(this_present_tbName && that_present_tbName))
          return false;
        if (!this.tbName.equals(that.tbName))
          return false;
      }

      boolean this_present_qv = true && this.isSetQv();
      boolean that_present_qv = true && that.isSetQv();
      if (this_present_qv || that_present_qv) {
        if (!(this_present_qv && that_present_qv))
          return false;
        if (!this.qv.equals(that.qv))
          return false;
      }

      boolean this_present_K = true;
      boolean that_present_K = true;
      if (this_present_K || that_present_K) {
        if (!(this_present_K && that_present_K))
          return false;
        if (this.K != that.K)
          return false;
      }

      boolean this_present_masterIp = true;
      boolean that_present_masterIp = true;
      if (this_present_masterIp || that_present_masterIp) {
        if (!(this_present_masterIp && that_present_masterIp))
          return false;
        if (this.masterIp != that.masterIp)
          return false;
      }

      boolean this_present_retCol = true && this.isSetRetCol();
      boolean that_present_retCol = true && that.isSetRetCol();
      if (this_present_retCol || that_present_retCol) {
        if (!(this_present_retCol && that_present_retCol))
          return false;
        if (!this.retCol.equals(that.retCol))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(peerKnnQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTbName()).compareTo(other.isSetTbName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTbName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbName, other.tbName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQv()).compareTo(other.isSetQv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qv, other.qv);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetK()).compareTo(other.isSetK());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetK()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.K, other.K);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMasterIp()).compareTo(other.isSetMasterIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterIp, other.masterIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRetCol()).compareTo(other.isSetRetCol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRetCol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retCol, other.retCol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("peerKnnQuery_args(");
      boolean first = true;

      sb.append("tbName:");
      if (this.tbName == null) {
        sb.append("null");
      } else {
        sb.append(this.tbName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qv:");
      if (this.qv == null) {
        sb.append("null");
      } else {
        sb.append(this.qv);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("K:");
      sb.append(this.K);
      first = false;
      if (!first) sb.append(", ");
      sb.append("masterIp:");
      sb.append(this.masterIp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("retCol:");
      if (this.retCol == null) {
        sb.append("null");
      } else {
        sb.append(this.retCol);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class peerKnnQuery_argsStandardSchemeFactory implements SchemeFactory {
      public peerKnnQuery_argsStandardScheme getScheme() {
        return new peerKnnQuery_argsStandardScheme();
      }
    }

    private static class peerKnnQuery_argsStandardScheme extends StandardScheme<peerKnnQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, peerKnnQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TB_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tbName = iprot.readString();
                struct.setTbNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QV
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list302 = iprot.readListBegin();
                  struct.qv = new ArrayList<Integer>(_list302.size);
                  for (int _i303 = 0; _i303 < _list302.size; ++_i303)
                  {
                    int _elem304;
                    _elem304 = iprot.readI32();
                    struct.qv.add(_elem304);
                  }
                  iprot.readListEnd();
                }
                struct.setQvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // K
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.K = iprot.readI32();
                struct.setKIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MASTER_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.masterIp = iprot.readI32();
                struct.setMasterIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // RET_COL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list305 = iprot.readListBegin();
                  struct.retCol = new ArrayList<Integer>(_list305.size);
                  for (int _i306 = 0; _i306 < _list305.size; ++_i306)
                  {
                    int _elem307;
                    _elem307 = iprot.readI32();
                    struct.retCol.add(_elem307);
                  }
                  iprot.readListEnd();
                }
                struct.setRetColIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, peerKnnQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tbName != null) {
          oprot.writeFieldBegin(TB_NAME_FIELD_DESC);
          oprot.writeString(struct.tbName);
          oprot.writeFieldEnd();
        }
        if (struct.qv != null) {
          oprot.writeFieldBegin(QV_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.qv.size()));
            for (int _iter308 : struct.qv)
            {
              oprot.writeI32(_iter308);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(K_FIELD_DESC);
        oprot.writeI32(struct.K);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MASTER_IP_FIELD_DESC);
        oprot.writeI32(struct.masterIp);
        oprot.writeFieldEnd();
        if (struct.retCol != null) {
          oprot.writeFieldBegin(RET_COL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.retCol.size()));
            for (int _iter309 : struct.retCol)
            {
              oprot.writeI32(_iter309);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class peerKnnQuery_argsTupleSchemeFactory implements SchemeFactory {
      public peerKnnQuery_argsTupleScheme getScheme() {
        return new peerKnnQuery_argsTupleScheme();
      }
    }

    private static class peerKnnQuery_argsTupleScheme extends TupleScheme<peerKnnQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, peerKnnQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTbName()) {
          optionals.set(0);
        }
        if (struct.isSetQv()) {
          optionals.set(1);
        }
        if (struct.isSetK()) {
          optionals.set(2);
        }
        if (struct.isSetMasterIp()) {
          optionals.set(3);
        }
        if (struct.isSetRetCol()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetTbName()) {
          oprot.writeString(struct.tbName);
        }
        if (struct.isSetQv()) {
          {
            oprot.writeI32(struct.qv.size());
            for (int _iter310 : struct.qv)
            {
              oprot.writeI32(_iter310);
            }
          }
        }
        if (struct.isSetK()) {
          oprot.writeI32(struct.K);
        }
        if (struct.isSetMasterIp()) {
          oprot.writeI32(struct.masterIp);
        }
        if (struct.isSetRetCol()) {
          {
            oprot.writeI32(struct.retCol.size());
            for (int _iter311 : struct.retCol)
            {
              oprot.writeI32(_iter311);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, peerKnnQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.tbName = iprot.readString();
          struct.setTbNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list312 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.qv = new ArrayList<Integer>(_list312.size);
            for (int _i313 = 0; _i313 < _list312.size; ++_i313)
            {
              int _elem314;
              _elem314 = iprot.readI32();
              struct.qv.add(_elem314);
            }
          }
          struct.setQvIsSet(true);
        }
        if (incoming.get(2)) {
          struct.K = iprot.readI32();
          struct.setKIsSet(true);
        }
        if (incoming.get(3)) {
          struct.masterIp = iprot.readI32();
          struct.setMasterIpIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list315 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.retCol = new ArrayList<Integer>(_list315.size);
            for (int _i316 = 0; _i316 < _list315.size; ++_i316)
            {
              int _elem317;
              _elem317 = iprot.readI32();
              struct.retCol.add(_elem317);
            }
          }
          struct.setRetColIsSet(true);
        }
      }
    }

  }

  public static class peerKnnQuery_result implements org.apache.thrift.TBase<peerKnnQuery_result, peerKnnQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<peerKnnQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("peerKnnQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new peerKnnQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new peerKnnQuery_resultTupleSchemeFactory());
    }

    public List<SPKVRow> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SPKVRow.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(peerKnnQuery_result.class, metaDataMap);
    }

    public peerKnnQuery_result() {
    }

    public peerKnnQuery_result(
      List<SPKVRow> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public peerKnnQuery_result(peerKnnQuery_result other) {
      if (other.isSetSuccess()) {
        List<SPKVRow> __this__success = new ArrayList<SPKVRow>(other.success.size());
        for (SPKVRow other_element : other.success) {
          __this__success.add(new SPKVRow(other_element));
        }
        this.success = __this__success;
      }
    }

    public peerKnnQuery_result deepCopy() {
      return new peerKnnQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SPKVRow> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SPKVRow elem) {
      if (this.success == null) {
        this.success = new ArrayList<SPKVRow>();
      }
      this.success.add(elem);
    }

    public List<SPKVRow> getSuccess() {
      return this.success;
    }

    public peerKnnQuery_result setSuccess(List<SPKVRow> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SPKVRow>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof peerKnnQuery_result)
        return this.equals((peerKnnQuery_result)that);
      return false;
    }

    public boolean equals(peerKnnQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(peerKnnQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("peerKnnQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class peerKnnQuery_resultStandardSchemeFactory implements SchemeFactory {
      public peerKnnQuery_resultStandardScheme getScheme() {
        return new peerKnnQuery_resultStandardScheme();
      }
    }

    private static class peerKnnQuery_resultStandardScheme extends StandardScheme<peerKnnQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, peerKnnQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list318 = iprot.readListBegin();
                  struct.success = new ArrayList<SPKVRow>(_list318.size);
                  for (int _i319 = 0; _i319 < _list318.size; ++_i319)
                  {
                    SPKVRow _elem320;
                    _elem320 = new SPKVRow();
                    _elem320.read(iprot);
                    struct.success.add(_elem320);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, peerKnnQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SPKVRow _iter321 : struct.success)
            {
              _iter321.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class peerKnnQuery_resultTupleSchemeFactory implements SchemeFactory {
      public peerKnnQuery_resultTupleScheme getScheme() {
        return new peerKnnQuery_resultTupleScheme();
      }
    }

    private static class peerKnnQuery_resultTupleScheme extends TupleScheme<peerKnnQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, peerKnnQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SPKVRow _iter322 : struct.success)
            {
              _iter322.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, peerKnnQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list323 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SPKVRow>(_list323.size);
            for (int _i324 = 0; _i324 < _list323.size; ++_i324)
            {
              SPKVRow _elem325;
              _elem325 = new SPKVRow();
              _elem325.read(iprot);
              struct.success.add(_elem325);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
